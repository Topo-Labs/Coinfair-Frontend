/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FarmAuctionInterface extends utils.Interface {
  functions: {
    "INIT_CODE_PAIR_HASH()": FunctionFragment;
    "WETH()": FunctionFragment;
    "WUSDC()": FunctionFragment;
    "WUSDT()": FunctionFragment;
    "addWhiteList(address,address,uint256)": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,address,uint256,uint256)": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToSetter()": FunctionFragment;
    "feeToWeight()": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "isTokenwhite(address)": FunctionFragment;
    "isWhite(address,address)": FunctionFragment;
    "iswhite(address)": FunctionFragment;
    "routerAddress()": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToSetter(address)": FunctionFragment;
    "setFeeToWeight(uint256)": FunctionFragment;
    "setRouterAddress(address)": FunctionFragment;
    "setwhite(address)": FunctionFragment;
    "setwhiteAddress(address)": FunctionFragment;
    "whiteAddress()": FunctionFragment;
    "whiteList(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INIT_CODE_PAIR_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "WUSDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WUSDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addWhiteList",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeToWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenwhite",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhite",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "iswhite", values: [string]): string;
  encodeFunctionData(
    functionFragment: "routerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setwhite", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setwhiteAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteList",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "INIT_CODE_PAIR_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WUSDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WUSDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeToWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenwhite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWhite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iswhite", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setwhite", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setwhiteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;

  events: {
    "AddWhite(address,bool)": EventFragment;
    "AddWhiteList(address,address,uint256)": EventFragment;
    "PairCreated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddWhite"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export type AddWhiteEvent = TypedEvent<
  [string, boolean],
  { token: string; value: boolean }
>;

export type AddWhiteEventFilter = TypedEventFilter<AddWhiteEvent>;

export type AddWhiteListEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; creator: string; value: BigNumber }
>;

export type AddWhiteListEventFilter = TypedEventFilter<AddWhiteListEvent>;

export type PairCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { token0: string; token1: string; pair: string; arg3: BigNumber }
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface FarmAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INIT_CODE_PAIR_HASH(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    WUSDC(overrides?: CallOverrides): Promise<[string]>;

    WUSDT(overrides?: CallOverrides): Promise<[string]>;

    addWhiteList(
      token: string,
      creator: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: string,
      tokenB: string,
      exponentA: BigNumberish,
      exponentB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    feeToSetter(overrides?: CallOverrides): Promise<[string]>;

    feeToWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isTokenwhite(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWhite(
      token: string,
      creator: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    iswhite(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    routerAddress(overrides?: CallOverrides): Promise<[string]>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeToWeight(
      _feeToWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouterAddress(
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setwhite(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setwhiteAddress(
      newWhiteAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteAddress(overrides?: CallOverrides): Promise<[string]>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  INIT_CODE_PAIR_HASH(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  WUSDC(overrides?: CallOverrides): Promise<string>;

  WUSDT(overrides?: CallOverrides): Promise<string>;

  addWhiteList(
    token: string,
    creator: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: string,
    tokenB: string,
    exponentA: BigNumberish,
    exponentB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  feeToSetter(overrides?: CallOverrides): Promise<string>;

  feeToWeight(overrides?: CallOverrides): Promise<BigNumber>;

  getPair(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isTokenwhite(token: string, overrides?: CallOverrides): Promise<boolean>;

  isWhite(
    token: string,
    creator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  iswhite(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  routerAddress(overrides?: CallOverrides): Promise<string>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeToSetter(
    _feeToSetter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeToWeight(
    _feeToWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouterAddress(
    _routerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setwhite(
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setwhiteAddress(
    newWhiteAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteAddress(overrides?: CallOverrides): Promise<string>;

  whiteList(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    INIT_CODE_PAIR_HASH(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    WUSDC(overrides?: CallOverrides): Promise<string>;

    WUSDT(overrides?: CallOverrides): Promise<string>;

    addWhiteList(
      token: string,
      creator: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      exponentA: BigNumberish,
      exponentB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    feeToSetter(overrides?: CallOverrides): Promise<string>;

    feeToWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isTokenwhite(token: string, overrides?: CallOverrides): Promise<boolean>;

    isWhite(
      token: string,
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iswhite(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    routerAddress(overrides?: CallOverrides): Promise<string>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeToWeight(
      _feeToWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouterAddress(
      _routerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setwhite(contractAddress: string, overrides?: CallOverrides): Promise<void>;

    setwhiteAddress(
      newWhiteAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteAddress(overrides?: CallOverrides): Promise<string>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddWhite(address,bool)"(
      token?: string | null,
      value?: null
    ): AddWhiteEventFilter;
    AddWhite(token?: string | null, value?: null): AddWhiteEventFilter;

    "AddWhiteList(address,address,uint256)"(
      token?: string | null,
      creator?: string | null,
      value?: null
    ): AddWhiteListEventFilter;
    AddWhiteList(
      token?: string | null,
      creator?: string | null,
      value?: null
    ): AddWhiteListEventFilter;

    "PairCreated(address,address,address,uint256)"(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      undefined?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      undefined?: null
    ): PairCreatedEventFilter;
  };

  estimateGas: {
    INIT_CODE_PAIR_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    WUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    WUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    addWhiteList(
      token: string,
      creator: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      exponentA: BigNumberish,
      exponentB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;

    feeToWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenwhite(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWhite(
      token: string,
      creator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iswhite(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    routerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeToWeight(
      _feeToWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouterAddress(
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setwhite(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setwhiteAddress(
      newWhiteAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteAddress(overrides?: CallOverrides): Promise<BigNumber>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INIT_CODE_PAIR_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WUSDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWhiteList(
      token: string,
      creator: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      exponentA: BigNumberish,
      exponentB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenwhite(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhite(
      token: string,
      creator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iswhite(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeToWeight(
      _feeToWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouterAddress(
      _routerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setwhite(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setwhiteAddress(
      newWhiteAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteList(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
