/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenTransferMetadataInterface extends utils.Interface {
  functions: {
    "mintNfts(address,address,address,uint256)": FunctionFragment;
    "transferBNB(address[],uint256[])": FunctionFragment;
    "transferTokens(address,address[],uint256[])": FunctionFragment;
    "transferViipTokens(address,address[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mintNfts",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBNB",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferViipTokens",
    values: [string, string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "mintNfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferViipTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TokenTransferMetadata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenTransferMetadataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mintNfts(
      nftContractAddress: string,
      handTokenAddress: string,
      minter: string,
      total: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBNB(
      tos: string[],
      values: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferViipTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  mintNfts(
    nftContractAddress: string,
    handTokenAddress: string,
    minter: string,
    total: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBNB(
    tos: string[],
    values: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTokens(
    tokenAddress: string,
    tos: string[],
    values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferViipTokens(
    tokenAddress: string,
    tos: string[],
    values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mintNfts(
      nftContractAddress: string,
      handTokenAddress: string,
      minter: string,
      total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferBNB(
      tos: string[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferViipTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    mintNfts(
      nftContractAddress: string,
      handTokenAddress: string,
      minter: string,
      total: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBNB(
      tos: string[],
      values: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferViipTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mintNfts(
      nftContractAddress: string,
      handTokenAddress: string,
      minter: string,
      total: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBNB(
      tos: string[],
      values: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferViipTokens(
      tokenAddress: string,
      tos: string[],
      values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
