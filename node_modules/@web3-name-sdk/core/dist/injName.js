var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/store2/dist/store2.js
var require_store2 = __commonJS({
  "../../node_modules/store2/dist/store2.js"(exports, module) {
    "use strict";
    (function(window2, define) {
      var _ = {
        version: "2.14.2",
        areas: {},
        apis: {},
        nsdelim: ".",
        // utilities
        inherit: function(api, o) {
          for (var p in api) {
            if (!o.hasOwnProperty(p)) {
              Object.defineProperty(o, p, Object.getOwnPropertyDescriptor(api, p));
            }
          }
          return o;
        },
        stringify: function(d, fn) {
          return d === void 0 || typeof d === "function" ? d + "" : JSON.stringify(d, fn || _.replace);
        },
        parse: function(s, fn) {
          try {
            return JSON.parse(s, fn || _.revive);
          } catch (e) {
            return s;
          }
        },
        // extension hooks
        fn: function(name, fn) {
          _.storeAPI[name] = fn;
          for (var api in _.apis) {
            _.apis[api][name] = fn;
          }
        },
        get: function(area, key) {
          return area.getItem(key);
        },
        set: function(area, key, string) {
          area.setItem(key, string);
        },
        remove: function(area, key) {
          area.removeItem(key);
        },
        key: function(area, i) {
          return area.key(i);
        },
        length: function(area) {
          return area.length;
        },
        clear: function(area) {
          area.clear();
        },
        // core functions
        Store: function(id, area, namespace) {
          var store3 = _.inherit(_.storeAPI, function(key, data, overwrite) {
            if (arguments.length === 0) {
              return store3.getAll();
            }
            if (typeof data === "function") {
              return store3.transact(key, data, overwrite);
            }
            if (data !== void 0) {
              return store3.set(key, data, overwrite);
            }
            if (typeof key === "string" || typeof key === "number") {
              return store3.get(key);
            }
            if (typeof key === "function") {
              return store3.each(key);
            }
            if (!key) {
              return store3.clear();
            }
            return store3.setAll(key, data);
          });
          store3._id = id;
          try {
            var testKey = "__store2_test";
            area.setItem(testKey, "ok");
            store3._area = area;
            area.removeItem(testKey);
          } catch (e) {
            store3._area = _.storage("fake");
          }
          store3._ns = namespace || "";
          if (!_.areas[id]) {
            _.areas[id] = store3._area;
          }
          if (!_.apis[store3._ns + store3._id]) {
            _.apis[store3._ns + store3._id] = store3;
          }
          return store3;
        },
        storeAPI: {
          // admin functions
          area: function(id, area) {
            var store3 = this[id];
            if (!store3 || !store3.area) {
              store3 = _.Store(id, area, this._ns);
              if (!this[id]) {
                this[id] = store3;
              }
            }
            return store3;
          },
          namespace: function(namespace, singleArea, delim) {
            delim = delim || this._delim || _.nsdelim;
            if (!namespace) {
              return this._ns ? this._ns.substring(0, this._ns.length - delim.length) : "";
            }
            var ns = namespace, store3 = this[ns];
            if (!store3 || !store3.namespace) {
              store3 = _.Store(this._id, this._area, this._ns + ns + delim);
              store3._delim = delim;
              if (!this[ns]) {
                this[ns] = store3;
              }
              if (!singleArea) {
                for (var name in _.areas) {
                  store3.area(name, _.areas[name]);
                }
              }
            }
            return store3;
          },
          isFake: function(force) {
            if (force) {
              this._real = this._area;
              this._area = _.storage("fake");
            } else if (force === false) {
              this._area = this._real || this._area;
            }
            return this._area.name === "fake";
          },
          toString: function() {
            return "store" + (this._ns ? "." + this.namespace() : "") + "[" + this._id + "]";
          },
          // storage functions
          has: function(key) {
            if (this._area.has) {
              return this._area.has(this._in(key));
            }
            return !!(this._in(key) in this._area);
          },
          size: function() {
            return this.keys().length;
          },
          each: function(fn, fill) {
            for (var i = 0, m = _.length(this._area); i < m; i++) {
              var key = this._out(_.key(this._area, i));
              if (key !== void 0) {
                if (fn.call(this, key, this.get(key), fill) === false) {
                  break;
                }
              }
              if (m > _.length(this._area)) {
                m--;
                i--;
              }
            }
            return fill || this;
          },
          keys: function(fillList) {
            return this.each(function(k, v, list) {
              list.push(k);
            }, fillList || []);
          },
          get: function(key, alt) {
            var s = _.get(this._area, this._in(key)), fn;
            if (typeof alt === "function") {
              fn = alt;
              alt = null;
            }
            return s !== null ? _.parse(s, fn) : alt != null ? alt : s;
          },
          getAll: function(fillObj) {
            return this.each(function(k, v, all) {
              all[k] = v;
            }, fillObj || {});
          },
          transact: function(key, fn, alt) {
            var val = this.get(key, alt), ret = fn(val);
            this.set(key, ret === void 0 ? val : ret);
            return this;
          },
          set: function(key, data, overwrite) {
            var d = this.get(key), replacer;
            if (d != null && overwrite === false) {
              return data;
            }
            if (typeof overwrite === "function") {
              replacer = overwrite;
              overwrite = void 0;
            }
            return _.set(this._area, this._in(key), _.stringify(data, replacer), overwrite) || d;
          },
          setAll: function(data, overwrite) {
            var changed, val;
            for (var key in data) {
              val = data[key];
              if (this.set(key, val, overwrite) !== val) {
                changed = true;
              }
            }
            return changed;
          },
          add: function(key, data, replacer) {
            var d = this.get(key);
            if (d instanceof Array) {
              data = d.concat(data);
            } else if (d !== null) {
              var type = typeof d;
              if (type === typeof data && type === "object") {
                for (var k in data) {
                  d[k] = data[k];
                }
                data = d;
              } else {
                data = d + data;
              }
            }
            _.set(this._area, this._in(key), _.stringify(data, replacer));
            return data;
          },
          remove: function(key, alt) {
            var d = this.get(key, alt);
            _.remove(this._area, this._in(key));
            return d;
          },
          clear: function() {
            if (!this._ns) {
              _.clear(this._area);
            } else {
              this.each(function(k) {
                _.remove(this._area, this._in(k));
              }, 1);
            }
            return this;
          },
          clearAll: function() {
            var area = this._area;
            for (var id in _.areas) {
              if (_.areas.hasOwnProperty(id)) {
                this._area = _.areas[id];
                this.clear();
              }
            }
            this._area = area;
            return this;
          },
          // internal use functions
          _in: function(k) {
            if (typeof k !== "string") {
              k = _.stringify(k);
            }
            return this._ns ? this._ns + k : k;
          },
          _out: function(k) {
            return this._ns ? k && k.indexOf(this._ns) === 0 ? k.substring(this._ns.length) : void 0 : (
              // so each() knows to skip it
              k
            );
          }
        },
        // end _.storeAPI
        storage: function(name) {
          return _.inherit(_.storageAPI, { items: {}, name });
        },
        storageAPI: {
          length: 0,
          has: function(k) {
            return this.items.hasOwnProperty(k);
          },
          key: function(i) {
            var c = 0;
            for (var k in this.items) {
              if (this.has(k) && i === c++) {
                return k;
              }
            }
          },
          setItem: function(k, v) {
            if (!this.has(k)) {
              this.length++;
            }
            this.items[k] = v;
          },
          removeItem: function(k) {
            if (this.has(k)) {
              delete this.items[k];
              this.length--;
            }
          },
          getItem: function(k) {
            return this.has(k) ? this.items[k] : null;
          },
          clear: function() {
            for (var k in this.items) {
              this.removeItem(k);
            }
          }
        }
        // end _.storageAPI
      };
      var store2 = (
        // safely set this up (throws error in IE10/32bit mode for local files)
        _.Store("local", function() {
          try {
            return localStorage;
          } catch (e) {
          }
        }())
      );
      store2.local = store2;
      store2._ = _;
      store2.area("session", function() {
        try {
          return sessionStorage;
        } catch (e) {
        }
      }());
      store2.area("page", _.storage("page"));
      if (typeof define === "function" && define.amd !== void 0) {
        define("store2", [], function() {
          return store2;
        });
      } else if (typeof module !== "undefined" && module.exports) {
        module.exports = store2;
      } else {
        if (window2.store) {
          _.conflict = window2.store;
        }
        window2.store = store2;
      }
    })(exports, exports && exports.define);
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// ../../node_modules/debug/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/debug/node_modules/ms/index.js"(exports, module) {
    "use strict";
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/debug/src/common.js
var require_common = __commonJS({
  "../../node_modules/debug/src/common.js"(exports, module) {
    "use strict";
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// ../../node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../../node_modules/debug/src/browser.js"(exports, module) {
    "use strict";
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../../node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "../../node_modules/has-flag/index.js"(exports, module) {
    "use strict";
    module.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// ../../node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "../../node_modules/supports-color/index.js"(exports, module) {
    "use strict";
    var os = __require("os");
    var tty = __require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var flagForceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      flagForceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      flagForceColor = 1;
    }
    function envForceColor() {
      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          return 1;
        }
        if (env.FORCE_COLOR === "false") {
          return 0;
        }
        return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
      const noFlagForceColor = envForceColor();
      if (noFlagForceColor !== void 0) {
        flagForceColor = noFlagForceColor;
      }
      const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
      if (forceColor === 0) {
        return 0;
      }
      if (sniffFlags) {
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream, options = {}) {
      const level = supportsColor(stream, {
        streamIsTTY: stream && stream.isTTY,
        ...options
      });
      return translateLevel(level);
    }
    module.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel({ isTTY: tty.isatty(1) }),
      stderr: getSupportLevel({ isTTY: tty.isatty(2) })
    };
  }
});

// ../../node_modules/debug/src/node.js
var require_node = __commonJS({
  "../../node_modules/debug/src/node.js"(exports, module) {
    "use strict";
    var tty = __require("tty");
    var util = __require("util");
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// ../../node_modules/debug/src/index.js
var require_src = __commonJS({
  "../../node_modules/debug/src/index.js"(exports, module) {
    "use strict";
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module.exports = require_browser();
    } else {
      module.exports = require_node();
    }
  }
});

// ../../node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  "../../node_modules/follow-redirects/debug.js"(exports, module) {
    "use strict";
    var debug;
    module.exports = function() {
      if (!debug) {
        try {
          debug = require_src()("follow-redirects");
        } catch (error) {
        }
        if (typeof debug !== "function") {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// ../../node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "../../node_modules/follow-redirects/index.js"(exports, module) {
    "use strict";
    var url = __require("url");
    var URL = url.URL;
    var http = __require("http");
    var https = __require("https");
    var Writable = __require("stream").Writable;
    var assert = __require("assert");
    var debug = require_debug();
    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      "ERR_INVALID_URL",
      "Invalid URL",
      TypeError
    );
    var RedirectionError = createErrorType(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError = createErrorType(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded"
    );
    var MaxBodyLengthExceededError = createErrorType(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError = createErrorType(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );
    var destroy = Writable.prototype.destroy || noop;
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self = this;
      this._onNativeResponse = function(response) {
        self._processResponse(response);
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      destroyRequest(this._currentRequest);
      this._currentRequest.abort();
      this.emit("abort");
    };
    RedirectableRequest.prototype.destroy = function(error) {
      destroyRequest(this._currentRequest, error);
      destroy.call(this, error);
      return this;
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }
      function startTimer(socket) {
        if (self._timeout) {
          clearTimeout(self._timeout);
        }
        self._timeout = setTimeout(function() {
          self.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self._timeout) {
          clearTimeout(self._timeout);
          self._timeout = null;
        }
        self.removeListener("abort", clearTimer);
        self.removeListener("error", clearTimer);
        self.removeListener("response", clearTimer);
        self.removeListener("close", clearTimer);
        if (callback) {
          self.removeListener("timeout", callback);
        }
        if (!self.socket) {
          self._currentRequest.removeListener("socket", startTimer);
        }
      }
      if (callback) {
        this.on("timeout", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);
      this.on("close", clearTimer);
      return this;
    };
    [
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self._currentRequest) {
            if (error) {
              self.emit("error", error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
        return;
      }
      destroyRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        this.emit("error", new TooManyRedirectsError());
        return;
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader("host")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = url.parse(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl;
      try {
        redirectUrl = url.resolve(currentUrl, location);
      } catch (cause) {
        this.emit("error", new RedirectionError({ cause }));
        return;
      }
      debug("redirecting to", redirectUrl);
      this._isRedirect = true;
      var redirectUrlParts = url.parse(redirectUrl);
      Object.assign(this._options, redirectUrlParts);
      if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
        removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        try {
          beforeRedirect(this._options, responseDetails, requestDetails);
        } catch (err) {
          this.emit("error", err);
          return;
        }
        this._sanitizeOptions(this._options);
      }
      try {
        this._performRequest();
      } catch (cause) {
        this.emit("error", new RedirectionError({ cause }));
      }
    };
    function wrap(protocols) {
      var exports2 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (isString(input)) {
            var parsed;
            try {
              parsed = urlToOptions(new URL(input));
            } catch (err) {
              parsed = url.parse(input);
            }
            if (!isString(parsed.protocol)) {
              throw new InvalidUrlError({ input });
            }
            input = parsed;
          } else if (URL && input instanceof URL) {
            input = urlToOptions(input);
          } else {
            callback = options;
            options = input;
            input = { protocol };
          }
          if (isFunction(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports2.maxRedirects,
            maxBodyLength: exports2.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          if (!isString(options.host) && !isString(options.hostname)) {
            options.hostname = "::1";
          }
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports2;
    }
    function noop() {
    }
    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ? (
          /* istanbul ignore next */
          urlObject.hostname.slice(1, -1)
        ) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
      };
      if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
      }
      return options;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = "Error [" + code + "]";
      return CustomError;
    }
    function destroyRequest(request, error) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on("error", noop);
      request.destroy(error);
    }
    function isSubdomain(subdomain, domain) {
      assert(isString(subdomain) && isString(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }
    function isString(value) {
      return typeof value === "string" || value instanceof String;
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function isBuffer(value) {
      return typeof value === "object" && "length" in value;
    }
    module.exports = wrap({ http, https });
    module.exports.wrap = wrap;
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/package.json
var require_package = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/package.json"(exports, module) {
    module.exports = {
      name: "axios",
      version: "0.21.4",
      description: "Promise based HTTP client for the browser and node.js",
      main: "index.js",
      scripts: {
        test: "grunt test",
        start: "node ./sandbox/server.js",
        build: "NODE_ENV=production grunt build",
        preversion: "npm test",
        version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
        postversion: "git push && git push --tags",
        examples: "node ./examples/server.js",
        coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
        fix: "eslint --fix lib/**/*.js"
      },
      repository: {
        type: "git",
        url: "https://github.com/axios/axios.git"
      },
      keywords: [
        "xhr",
        "http",
        "ajax",
        "promise",
        "node"
      ],
      author: "Matt Zabriskie",
      license: "MIT",
      bugs: {
        url: "https://github.com/axios/axios/issues"
      },
      homepage: "https://axios-http.com",
      devDependencies: {
        coveralls: "^3.0.0",
        "es6-promise": "^4.2.4",
        grunt: "^1.3.0",
        "grunt-banner": "^0.6.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-clean": "^1.1.0",
        "grunt-contrib-watch": "^1.0.0",
        "grunt-eslint": "^23.0.0",
        "grunt-karma": "^4.0.0",
        "grunt-mocha-test": "^0.13.3",
        "grunt-ts": "^6.0.0-beta.19",
        "grunt-webpack": "^4.0.2",
        "istanbul-instrumenter-loader": "^1.0.0",
        "jasmine-core": "^2.4.1",
        karma: "^6.3.2",
        "karma-chrome-launcher": "^3.1.0",
        "karma-firefox-launcher": "^2.1.0",
        "karma-jasmine": "^1.1.1",
        "karma-jasmine-ajax": "^0.1.13",
        "karma-safari-launcher": "^1.0.0",
        "karma-sauce-launcher": "^4.3.6",
        "karma-sinon": "^1.0.5",
        "karma-sourcemap-loader": "^0.3.8",
        "karma-webpack": "^4.0.2",
        "load-grunt-tasks": "^3.5.2",
        minimist: "^1.2.0",
        mocha: "^8.2.1",
        sinon: "^4.5.0",
        "terser-webpack-plugin": "^4.2.3",
        typescript: "^4.0.5",
        "url-search-params": "^0.10.0",
        webpack: "^4.44.2",
        "webpack-dev-server": "^3.11.0"
      },
      browser: {
        "./lib/adapters/http.js": "./lib/adapters/xhr.js"
      },
      jsdelivr: "dist/axios.min.js",
      unpkg: "dist/axios.min.js",
      typings: "./index.d.ts",
      dependencies: {
        "follow-redirects": "^1.14.0"
      },
      bundlesize: [
        {
          path: "./dist/axios.min.js",
          threshold: "5kB"
        }
      ]
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/adapters/http.js
var require_http = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/adapters/http.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var buildFullPath = require_buildFullPath();
    var buildURL = require_buildURL();
    var http = __require("http");
    var https = __require("https");
    var httpFollow = require_follow_redirects().http;
    var httpsFollow = require_follow_redirects().https;
    var url = __require("url");
    var zlib = __require("zlib");
    var pkg = require_package();
    var createError = require_createError();
    var enhanceError = require_enhanceError();
    var isHttps = /https:?/;
    function setProxy(options, proxy, location) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.port = proxy.port;
      options.path = location;
      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ":" + proxy.auth.password, "utf8").toString("base64");
        options.headers["Proxy-Authorization"] = "Basic " + base64;
      }
      options.beforeRedirect = function beforeRedirect(redirection) {
        redirection.headers.host = redirection.host;
        setProxy(redirection, proxy, redirection.href);
      };
    }
    module.exports = function httpAdapter(config) {
      return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
        var resolve = function resolve2(value) {
          resolvePromise(value);
        };
        var reject = function reject2(value) {
          rejectPromise(value);
        };
        var data = config.data;
        var headers = config.headers;
        if ("User-Agent" in headers || "user-agent" in headers) {
          if (!headers["User-Agent"] && !headers["user-agent"]) {
            delete headers["User-Agent"];
            delete headers["user-agent"];
          }
        } else {
          headers["User-Agent"] = "axios/" + pkg.version;
        }
        if (data && !utils.isStream(data)) {
          if (Buffer.isBuffer(data)) {
          } else if (utils.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(createError(
              "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
              config
            ));
          }
          headers["Content-Length"] = data.length;
        }
        var auth = void 0;
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password || "";
          auth = username + ":" + password;
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        var parsed = url.parse(fullPath);
        var protocol = parsed.protocol || "http:";
        if (!auth && parsed.auth) {
          var urlAuth = parsed.auth.split(":");
          var urlUsername = urlAuth[0] || "";
          var urlPassword = urlAuth[1] || "";
          auth = urlUsername + ":" + urlPassword;
        }
        if (auth) {
          delete headers.Authorization;
        }
        var isHttpsRequest = isHttps.test(protocol);
        var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        var options = {
          path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ""),
          method: config.method.toUpperCase(),
          headers,
          agent,
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth
        };
        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
        }
        var proxy = config.proxy;
        if (!proxy && proxy !== false) {
          var proxyEnv = protocol.slice(0, -1) + "_proxy";
          var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
          if (proxyUrl) {
            var parsedProxyUrl = url.parse(proxyUrl);
            var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
            var shouldProxy = true;
            if (noProxyEnv) {
              var noProxy = noProxyEnv.split(",").map(function trim(s) {
                return s.trim();
              });
              shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                if (!proxyElement) {
                  return false;
                }
                if (proxyElement === "*") {
                  return true;
                }
                if (proxyElement[0] === "." && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                  return true;
                }
                return parsed.hostname === proxyElement;
              });
            }
            if (shouldProxy) {
              proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                protocol: parsedProxyUrl.protocol
              };
              if (parsedProxyUrl.auth) {
                var proxyUrlAuth = parsedProxyUrl.auth.split(":");
                proxy.auth = {
                  username: proxyUrlAuth[0],
                  password: proxyUrlAuth[1]
                };
              }
            }
          }
        }
        if (proxy) {
          options.headers.host = parsed.hostname + (parsed.port ? ":" + parsed.port : "");
          setProxy(options, proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
        }
        var transport;
        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsProxy ? https : http;
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          transport = isHttpsProxy ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        }
        var req = transport.request(options, function handleResponse(res) {
          if (req.aborted)
            return;
          var stream = res;
          var lastRequest = res.req || req;
          if (res.statusCode !== 204 && lastRequest.method !== "HEAD" && config.decompress !== false) {
            switch (res.headers["content-encoding"]) {
              case "gzip":
              case "compress":
              case "deflate":
                stream = stream.pipe(zlib.createUnzip());
                delete res.headers["content-encoding"];
                break;
            }
          }
          var response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            config,
            request: lastRequest
          };
          if (config.responseType === "stream") {
            response.data = stream;
            settle(resolve, reject, response);
          } else {
            var responseBuffer = [];
            var totalResponseBytes = 0;
            stream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                stream.destroy();
                reject(createError(
                  "maxContentLength size of " + config.maxContentLength + " exceeded",
                  config,
                  null,
                  lastRequest
                ));
              }
            });
            stream.on("error", function handleStreamError(err) {
              if (req.aborted)
                return;
              reject(enhanceError(err, config, null, lastRequest));
            });
            stream.on("end", function handleStreamEnd() {
              var responseData = Buffer.concat(responseBuffer);
              if (config.responseType !== "arraybuffer") {
                responseData = responseData.toString(config.responseEncoding);
                if (!config.responseEncoding || config.responseEncoding === "utf8") {
                  responseData = utils.stripBOM(responseData);
                }
              }
              response.data = responseData;
              settle(resolve, reject, response);
            });
          }
        });
        req.on("error", function handleRequestError(err) {
          if (req.aborted && err.code !== "ERR_FR_TOO_MANY_REDIRECTS")
            return;
          reject(enhanceError(err, config, null, req));
        });
        if (config.timeout) {
          var timeout = parseInt(config.timeout, 10);
          if (isNaN(timeout)) {
            reject(createError(
              "error trying to parse `config.timeout` to int",
              config,
              "ERR_PARSE_TIMEOUT",
              req
            ));
            return;
          }
          req.setTimeout(timeout, function handleRequestTimeout() {
            req.abort();
            reject(createError(
              "timeout of " + timeout + "ms exceeded",
              config,
              config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
              req
            ));
          });
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (req.aborted)
              return;
            req.abort();
            reject(cancel);
          });
        }
        if (utils.isStream(data)) {
          data.on("error", function handleStreamError(err) {
            reject(enhanceError(err, config, null, req));
          }).pipe(req);
        } else {
          req.end(data);
        }
      });
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_http();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ["url", "method", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
      var defaultToConfig2Keys = [
        "baseURL",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "timeoutMessage",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "decompress",
        "maxContentLength",
        "maxBodyLength",
        "maxRedirects",
        "transport",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath",
        "responseEncoding"
      ];
      var directMergeKeys = ["validateStatus"];
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      }
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var pkg = require_package();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    var currentVerArr = pkg.version.split(".");
    function isOlderVersion(version, thanVersion) {
      var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
      var destVer = version.split(".");
      for (var i = 0; i < 3; i++) {
        if (pkgVersionArr[i] > destVer[i]) {
          return true;
        } else if (pkgVersionArr[i] < destVer[i]) {
          return false;
        }
      }
      return false;
    }
    validators.transitional = function transitional(validator, version, message) {
      var isDeprecated = version && isOlderVersion(version);
      function formatMessage(opt, desc) {
        return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed in " + version));
        }
        if (isDeprecated && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      isOlderVersion,
      assertOptions,
      validators
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
          forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
          clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios3 = createInstance(defaults);
    axios3.Axios = Axios;
    axios3.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios3.defaults, instanceConfig));
    };
    axios3.Cancel = require_Cancel();
    axios3.CancelToken = require_CancelToken();
    axios3.isCancel = require_isCancel();
    axios3.all = function all(promises) {
      return Promise.all(promises);
    };
    axios3.spread = require_spread();
    axios3.isAxiosError = require_isAxiosError();
    module.exports = axios3;
    module.exports.default = axios3;
  }
});

// ../../node_modules/@injectivelabs/utils/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "../../node_modules/@injectivelabs/utils/node_modules/axios/index.js"(exports, module) {
    "use strict";
    module.exports = require_axios();
  }
});

// src/tlds/inj/index.ts
import InjectiveID from "@siddomains/injective-sidjs";
import { getInjectiveIDAddress } from "@siddomains/injective-sidjs";

// ../../node_modules/@injectivelabs/networks/node_modules/@injectivelabs/ts-types/dist/esm/enums.js
var EthereumChainId;
(function(EthereumChainId3) {
  EthereumChainId3[EthereumChainId3["Mainnet"] = 1] = "Mainnet";
  EthereumChainId3[EthereumChainId3["Ropsten"] = 3] = "Ropsten";
  EthereumChainId3[EthereumChainId3["Rinkeby"] = 4] = "Rinkeby";
  EthereumChainId3[EthereumChainId3["Goerli"] = 5] = "Goerli";
  EthereumChainId3[EthereumChainId3["Kovan"] = 42] = "Kovan";
  EthereumChainId3[EthereumChainId3["Injective"] = 888] = "Injective";
  EthereumChainId3[EthereumChainId3["Ganache"] = 1337] = "Ganache";
  EthereumChainId3[EthereumChainId3["HardHat"] = 31337] = "HardHat";
})(EthereumChainId || (EthereumChainId = {}));
var ChainId;
(function(ChainId3) {
  ChainId3["Mainnet"] = "injective-1";
  ChainId3["Testnet"] = "injective-888";
  ChainId3["Devnet"] = "injective-777";
})(ChainId || (ChainId = {}));
var MsgType;
(function(MsgType3) {
  MsgType3["MsgExec"] = "cosmos.authz.v1beta1.MsgExec";
  MsgType3["MsgGrant"] = "cosmos.authz.v1beta1.MsgGrant";
  MsgType3["MsgRevoke"] = "cosmos.authz.v1beta1.MsgRevoke";
  MsgType3["MsgSend"] = "cosmos.bank.v1beta1.MsgSend";
  MsgType3["MsgWithdrawDelegatorReward"] = "cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward";
  MsgType3["MsgGrantAllowance"] = "cosmos.feegrant.v1beta1.MsgGrantAllowance";
  MsgType3["MsgRevokeAllowance"] = "cosmos.feegrant.v1beta1.MsgRevokeAllowance";
  MsgType3["MsgDepositCosmos"] = "cosmos.gov.v1beta1.MsgDeposit";
  MsgType3["MsgSubmitProposal"] = "cosmos.gov.v1beta1.MsgSubmitProposal";
  MsgType3["MsgVote"] = "cosmos.gov.v1beta1.MsgVote";
  MsgType3["MsgUnjail"] = "cosmos.slashing.v1beta1.MsgUnjail";
  MsgType3["MsgBeginRedelegate"] = "cosmos.staking.v1beta1.MsgBeginRedelegate";
  MsgType3["MsgCreateValidator"] = "cosmos.staking.v1beta1.MsgCreateValidator";
  MsgType3["MsgDelegate"] = "cosmos.staking.v1beta1.MsgDelegate";
  MsgType3["MsgEditValidator"] = "cosmos.staking.v1beta1.MsgEditValidator";
  MsgType3["MsgUndelegate"] = "cosmos.staking.v1beta1.MsgUndelegate";
  MsgType3["MsgExecuteContract"] = "cosmwasm.wasm.v1.MsgExecuteContract";
  MsgType3["MsgInstantiateContract"] = "cosmwasm.wasm.v1.MsgInstantiateContract";
  MsgType3["MsgInstantiateContract2"] = "cosmwasm.wasm.v1.MsgInstantiateContract2";
  MsgType3["MsgMigrateContract"] = "cosmwasm.wasm.v1.MsgMigrateContract";
  MsgType3["MsgStoreCode"] = "cosmwasm.wasm.v1.MsgStoreCode";
  MsgType3["MsgUpdateAdmin"] = "cosmwasm.wasm.v1.MsgUpdateAdmin";
  MsgType3["MsgTransfer"] = "ibc.applications.transfer.v1.MsgTransfer";
  MsgType3["MsgAcknowledgement"] = "ibc.core.channel.v1.MsgAcknowledgement";
  MsgType3["MsgChannelOpenAck"] = "ibc.core.channel.v1.MsgChannelOpenAck";
  MsgType3["MsgChannelOpenConfirm"] = "ibc.core.channel.v1.MsgChannelOpenConfirm";
  MsgType3["MsgChannelOpenInit"] = "ibc.core.channel.v1.MsgChannelOpenInit";
  MsgType3["MsgChannelOpenTry"] = "ibc.core.channel.v1.MsgChannelOpenTry";
  MsgType3["MsgRecvPacket"] = "ibc.core.channel.v1.MsgRecvPacket";
  MsgType3["MsgTimeout"] = "ibc.core.channel.v1.MsgTimeout";
  MsgType3["MsgCreateClient"] = "ibc.core.client.v1.MsgCreateClient";
  MsgType3["MsgUpdateClient"] = "ibc.core.client.v1.MsgUpdateClient";
  MsgType3["MsgConnectionOpenAck"] = "ibc.core.connection.v1.MsgConnectionOpenAck";
  MsgType3["MsgConnectionOpenConfirm"] = "ibc.core.connection.v1.MsgConnectionOpenConfirm";
  MsgType3["MsgConnectionOpenInit"] = "ibc.core.connection.v1.MsgConnectionOpenInit";
  MsgType3["MsgConnectionOpenTry"] = "ibc.core.connection.v1.MsgConnectionOpenTry";
  MsgType3["MsgBid"] = "injective.auction.v1beta1.MsgBid";
  MsgType3["MsgAdminUpdateBinaryOptionsMarket"] = "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket";
  MsgType3["MsgBatchCancelDerivativeOrders"] = "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders";
  MsgType3["MsgBatchCancelSpotOrders"] = "injective.exchange.v1beta1.MsgBatchCancelSpotOrders";
  MsgType3["MsgBatchCreateDerivativeLimitOrders"] = "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders";
  MsgType3["MsgBatchCreateSpotLimitOrders"] = "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders";
  MsgType3["MsgBatchUpdateOrders"] = "injective.exchange.v1beta1.MsgBatchUpdateOrders";
  MsgType3["MsgCancelBinaryOptionsOrder"] = "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder";
  MsgType3["MsgCancelDerivativeOrder"] = "injective.exchange.v1beta1.MsgCancelDerivativeOrder";
  MsgType3["MsgCancelSpotOrder"] = "injective.exchange.v1beta1.MsgCancelSpotOrder";
  MsgType3["MsgCreateBinaryOptionsLimitOrder"] = "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder";
  MsgType3["MsgCreateBinaryOptionsMarketOrder"] = "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder";
  MsgType3["MsgCreateDerivativeLimitOrder"] = "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder";
  MsgType3["MsgCreateDerivativeMarketOrder"] = "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder";
  MsgType3["MsgCreateSpotLimitOrder"] = "injective.exchange.v1beta1.MsgCreateSpotLimitOrder";
  MsgType3["MsgCreateSpotMarketOrder"] = "injective.exchange.v1beta1.MsgCreateSpotMarketOrder";
  MsgType3["MsgDeposit"] = "injective.exchange.v1beta1.MsgDeposit";
  MsgType3["MsgExternalTransfer"] = "injective.exchange.v1beta1.MsgExternalTransfer";
  MsgType3["MsgIncreasePositionMargin"] = "injective.exchange.v1beta1.MsgIncreasePositionMargin";
  MsgType3["MsgInstantBinaryOptionsMarketLaunch"] = "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch";
  MsgType3["MsgInstantPerpetualMarketLaunch"] = "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch";
  MsgType3["MsgInstantSpotMarketLaunch"] = "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch";
  MsgType3["MsgReclaimLockedFunds"] = "injective.exchange.v1beta1.MsgReclaimLockedFunds";
  MsgType3["MsgRewardsOptOut"] = "injective.exchange.v1beta1.MsgRewardsOptOut";
  MsgType3["MsgSubaccountTransfer"] = "injective.exchange.v1beta1.MsgSubaccountTransfer";
  MsgType3["MsgWithdraw"] = "injective.exchange.v1beta1.MsgWithdraw";
  MsgType3["MsgCreateInsuranceFund"] = "injective.insurance.v1beta1.MsgCreateInsuranceFund";
  MsgType3["MsgRequestRedemption"] = "injective.insurance.v1beta1.MsgRequestRedemption";
  MsgType3["MsgUnderwrite"] = "injective.insurance.v1beta1.MsgUnderwrite";
  MsgType3["MsgConfirmBatch"] = "injective.peggy.v1.MsgConfirmBatch";
  MsgType3["MsgDepositClaim"] = "injective.peggy.v1.MsgDepositClaim";
  MsgType3["MsgERC20DeployedClaim"] = "injective.peggy.v1.MsgERC20DeployedClaim";
  MsgType3["MsgRequestBatch"] = "injective.peggy.v1.MsgRequestBatch";
  MsgType3["MsgSendToEth"] = "injective.peggy.v1.MsgSendToEth";
  MsgType3["MsgSetOrchestratorAddresses"] = "injective.peggy.v1.MsgSetOrchestratorAddresses";
  MsgType3["MsgValsetConfirm"] = "injective.peggy.v1.MsgValsetConfirm";
  MsgType3["MsgValsetUpdatedClaim"] = "injective.peggy.v1.MsgValsetUpdatedClaim";
  MsgType3["MsgWithdrawClaim"] = "injective.peggy.v1.MsgWithdrawClaim";
  MsgType3["MsgBurn"] = "injective.tokenfactory.v1beta1.MsgBurn";
  MsgType3["MsgMint"] = "injective.tokenfactory.v1beta1.MsgMint";
  MsgType3["MsgCreateDenom"] = "injective.tokenfactory.v1beta1.MsgCreateDenom";
  MsgType3["MsgExecuteContractCompat"] = "injective.wasmx.v1.MsgExecuteContractCompat";
})(MsgType || (MsgType = {}));
var MsgStatus;
(function(MsgStatus3) {
  MsgStatus3["Success"] = "success";
  MsgStatus3["Fail"] = "fail";
})(MsgStatus || (MsgStatus = {}));

// ../../node_modules/@injectivelabs/networks/node_modules/@injectivelabs/ts-types/dist/esm/cosmos.js
var CosmosChainId;
(function(CosmosChainId3) {
  CosmosChainId3["Injective"] = "injective-1";
  CosmosChainId3["Cosmoshub"] = "cosmoshub-4";
  CosmosChainId3["Juno"] = "juno-1";
  CosmosChainId3["Osmosis"] = "osmosis-1";
  CosmosChainId3["Terra"] = "columbus-5";
  CosmosChainId3["TerraUST"] = "columbus-5";
  CosmosChainId3["Chihuahua"] = "chihuahua-1";
  CosmosChainId3["Axelar"] = "axelar-dojo-1";
  CosmosChainId3["Evmos"] = "evmos_9001-2";
  CosmosChainId3["Persistence"] = "core-1";
  CosmosChainId3["Secret"] = "secret-4";
  CosmosChainId3["Stride"] = "stride-1";
  CosmosChainId3["Crescent"] = "crescent-1";
  CosmosChainId3["Sommelier"] = "sommelier-3";
  CosmosChainId3["Canto"] = "canto_7700-1";
  CosmosChainId3["Kava"] = "kava_2222-10";
  CosmosChainId3["Oraichain"] = "Oraichain";
  CosmosChainId3["Noble"] = "noble-1";
  CosmosChainId3["Celestia"] = "celestia";
})(CosmosChainId || (CosmosChainId = {}));
var TestnetCosmosChainId;
(function(TestnetCosmosChainId3) {
  TestnetCosmosChainId3["Injective"] = "injective-888";
  TestnetCosmosChainId3["Cosmoshub"] = "cosmoshub-testnet";
})(TestnetCosmosChainId || (TestnetCosmosChainId = {}));
var DevnetCosmosChainId;
(function(DevnetCosmosChainId3) {
  DevnetCosmosChainId3["Injective"] = "injective-777";
  DevnetCosmosChainId3["Injective1"] = "injective-777";
  DevnetCosmosChainId3["Injective2"] = "injective-777";
})(DevnetCosmosChainId || (DevnetCosmosChainId = {}));

// ../../node_modules/@injectivelabs/networks/node_modules/@injectivelabs/ts-types/dist/esm/trade.js
var TradeExecutionType;
(function(TradeExecutionType3) {
  TradeExecutionType3["Market"] = "market";
  TradeExecutionType3["LimitFill"] = "limitFill";
  TradeExecutionType3["LimitMatchRestingOrder"] = "limitMatchRestingOrder";
  TradeExecutionType3["LimitMatchNewOrder"] = "limitMatchNewOrder";
})(TradeExecutionType || (TradeExecutionType = {}));
var TradeExecutionSide;
(function(TradeExecutionSide3) {
  TradeExecutionSide3["Maker"] = "maker";
  TradeExecutionSide3["Taker"] = "taker";
})(TradeExecutionSide || (TradeExecutionSide = {}));
var TradeDirection;
(function(TradeDirection3) {
  TradeDirection3["Buy"] = "buy";
  TradeDirection3["Sell"] = "sell";
  TradeDirection3["Long"] = "long";
  TradeDirection3["Short"] = "short";
})(TradeDirection || (TradeDirection = {}));
var OrderState;
(function(OrderState3) {
  OrderState3["Unfilled"] = "unfilled";
  OrderState3["Booked"] = "booked";
  OrderState3["PartialFilled"] = "partial_filled";
  OrderState3["PartiallyFilled"] = "partially_filled";
  OrderState3["Filled"] = "filled";
  OrderState3["Canceled"] = "canceled";
  OrderState3["Triggered"] = "triggered";
})(OrderState || (OrderState = {}));
var OrderSide;
(function(OrderSide3) {
  OrderSide3["Unspecified"] = "unspecified";
  OrderSide3["Buy"] = "buy";
  OrderSide3["Sell"] = "sell";
  OrderSide3["StopBuy"] = "stop_buy";
  OrderSide3["StopSell"] = "stop_sell";
  OrderSide3["TakeBuy"] = "take_buy";
  OrderSide3["TakeSell"] = "take_sell";
  OrderSide3["BuyPO"] = "buy_po";
  OrderSide3["SellPO"] = "sell_po";
  OrderSide3["BuyAtomic"] = "buy_atomic";
  OrderSide3["SellAtomic"] = "sell_atomic";
  OrderSide3["Unrecognized"] = "unrecognized";
})(OrderSide || (OrderSide = {}));

// ../../node_modules/@injectivelabs/networks/node_modules/@injectivelabs/ts-types/dist/esm/index.js
var StreamOperation;
(function(StreamOperation3) {
  StreamOperation3["Insert"] = "insert";
  StreamOperation3["Delete"] = "delete";
  StreamOperation3["Replace"] = "replace";
  StreamOperation3["Update"] = "update";
  StreamOperation3["Invalidate"] = "invalidate";
})(StreamOperation || (StreamOperation = {}));

// ../../node_modules/@injectivelabs/utils/dist/esm/classes/LocalStorage.js
var import_store2 = __toESM(require_store2(), 1);

// ../../node_modules/bignumber.js/bignumber.mjs
var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i;
var mathceil = Math.ceil;
var mathfloor = Math.floor;
var bignumberError = "[BigNumber Error] ";
var tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ";
var BASE = 1e14;
var LOG_BASE = 14;
var MAX_SAFE_INTEGER = 9007199254740991;
var POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13];
var SQRT_BASE = 1e7;
var MAX = 1e9;
function clone(configObject) {
  var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
    prefix: "",
    groupSize: 3,
    secondaryGroupSize: 0,
    groupSeparator: ",",
    decimalSeparator: ".",
    fractionGroupSize: 0,
    fractionGroupSeparator: "\xA0",
    // non-breaking space
    suffix: ""
  }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
  function BigNumber2(v, b) {
    var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
    if (!(x instanceof BigNumber2))
      return new BigNumber2(v, b);
    if (b == null) {
      if (v && v._isBigNumber === true) {
        x.s = v.s;
        if (!v.c || v.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (v.e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = v.e;
          x.c = v.c.slice();
        }
        return;
      }
      if ((isNum = typeof v == "number") && v * 0 == 0) {
        x.s = 1 / v < 0 ? (v = -v, -1) : 1;
        if (v === ~~v) {
          for (e = 0, i = v; i >= 10; i /= 10, e++)
            ;
          if (e > MAX_EXP) {
            x.c = x.e = null;
          } else {
            x.e = e;
            x.c = [v];
          }
          return;
        }
        str = String(v);
      } else {
        if (!isNumeric.test(str = String(v)))
          return parseNumeric(x, str, isNum);
        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
      }
      if ((e = str.indexOf(".")) > -1)
        str = str.replace(".", "");
      if ((i = str.search(/e/i)) > 0) {
        if (e < 0)
          e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {
        e = str.length;
      }
    } else {
      intCheck(b, 2, ALPHABET.length, "Base");
      if (b == 10 && alphabetHasNormalDecimalDigits) {
        x = new BigNumber2(v);
        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
      }
      str = String(v);
      if (isNum = typeof v == "number") {
        if (v * 0 != 0)
          return parseNumeric(x, str, isNum, b);
        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
        if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
          throw Error(tooManyDigits + v);
        }
      } else {
        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
      }
      alphabet = ALPHABET.slice(0, b);
      e = i = 0;
      for (len = str.length; i < len; i++) {
        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
          if (c == ".") {
            if (i > e) {
              e = len;
              continue;
            }
          } else if (!caseChanged) {
            if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
              caseChanged = true;
              i = -1;
              e = 0;
              continue;
            }
          }
          return parseNumeric(x, String(v), isNum, b);
        }
      }
      isNum = false;
      str = convertBase(str, b, 10, x.s);
      if ((e = str.indexOf(".")) > -1)
        str = str.replace(".", "");
      else
        e = str.length;
    }
    for (i = 0; str.charCodeAt(i) === 48; i++)
      ;
    for (len = str.length; str.charCodeAt(--len) === 48; )
      ;
    if (str = str.slice(i, ++len)) {
      len -= i;
      if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
        throw Error(tooManyDigits + x.s * v);
      }
      if ((e = e - i - 1) > MAX_EXP) {
        x.c = x.e = null;
      } else if (e < MIN_EXP) {
        x.c = [x.e = 0];
      } else {
        x.e = e;
        x.c = [];
        i = (e + 1) % LOG_BASE;
        if (e < 0)
          i += LOG_BASE;
        if (i < len) {
          if (i)
            x.c.push(+str.slice(0, i));
          for (len -= LOG_BASE; i < len; ) {
            x.c.push(+str.slice(i, i += LOG_BASE));
          }
          i = LOG_BASE - (str = str.slice(i)).length;
        } else {
          i -= len;
        }
        for (; i--; str += "0")
          ;
        x.c.push(+str);
      }
    } else {
      x.c = [x.e = 0];
    }
  }
  BigNumber2.clone = clone;
  BigNumber2.ROUND_UP = 0;
  BigNumber2.ROUND_DOWN = 1;
  BigNumber2.ROUND_CEIL = 2;
  BigNumber2.ROUND_FLOOR = 3;
  BigNumber2.ROUND_HALF_UP = 4;
  BigNumber2.ROUND_HALF_DOWN = 5;
  BigNumber2.ROUND_HALF_EVEN = 6;
  BigNumber2.ROUND_HALF_CEIL = 7;
  BigNumber2.ROUND_HALF_FLOOR = 8;
  BigNumber2.EUCLID = 9;
  BigNumber2.config = BigNumber2.set = function(obj) {
    var p, v;
    if (obj != null) {
      if (typeof obj == "object") {
        if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          DECIMAL_PLACES = v;
        }
        if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
          v = obj[p];
          intCheck(v, 0, 8, p);
          ROUNDING_MODE = v;
        }
        if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, 0, p);
            intCheck(v[1], 0, MAX, p);
            TO_EXP_NEG = v[0];
            TO_EXP_POS = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
          }
        }
        if (obj.hasOwnProperty(p = "RANGE")) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, -1, p);
            intCheck(v[1], 1, MAX, p);
            MIN_EXP = v[0];
            MAX_EXP = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            if (v) {
              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
            } else {
              throw Error(bignumberError + p + " cannot be zero: " + v);
            }
          }
        }
        if (obj.hasOwnProperty(p = "CRYPTO")) {
          v = obj[p];
          if (v === !!v) {
            if (v) {
              if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                CRYPTO = v;
              } else {
                CRYPTO = !v;
                throw Error(bignumberError + "crypto unavailable");
              }
            } else {
              CRYPTO = v;
            }
          } else {
            throw Error(bignumberError + p + " not true or false: " + v);
          }
        }
        if (obj.hasOwnProperty(p = "MODULO_MODE")) {
          v = obj[p];
          intCheck(v, 0, 9, p);
          MODULO_MODE = v;
        }
        if (obj.hasOwnProperty(p = "POW_PRECISION")) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          POW_PRECISION = v;
        }
        if (obj.hasOwnProperty(p = "FORMAT")) {
          v = obj[p];
          if (typeof v == "object")
            FORMAT = v;
          else
            throw Error(bignumberError + p + " not an object: " + v);
        }
        if (obj.hasOwnProperty(p = "ALPHABET")) {
          v = obj[p];
          if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
            alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
            ALPHABET = v;
          } else {
            throw Error(bignumberError + p + " invalid: " + v);
          }
        }
      } else {
        throw Error(bignumberError + "Object expected: " + obj);
      }
    }
    return {
      DECIMAL_PLACES,
      ROUNDING_MODE,
      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
      RANGE: [MIN_EXP, MAX_EXP],
      CRYPTO,
      MODULO_MODE,
      POW_PRECISION,
      FORMAT,
      ALPHABET
    };
  };
  BigNumber2.isBigNumber = function(v) {
    if (!v || v._isBigNumber !== true)
      return false;
    if (!BigNumber2.DEBUG)
      return true;
    var i, n, c = v.c, e = v.e, s = v.s;
    out:
      if ({}.toString.call(c) == "[object Array]") {
        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
          if (c[0] === 0) {
            if (e === 0 && c.length === 1)
              return true;
            break out;
          }
          i = (e + 1) % LOG_BASE;
          if (i < 1)
            i += LOG_BASE;
          if (String(c[0]).length == i) {
            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n))
                break out;
            }
            if (n !== 0)
              return true;
          }
        }
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }
    throw Error(bignumberError + "Invalid BigNumber: " + v);
  };
  BigNumber2.maximum = BigNumber2.max = function() {
    return maxOrMin(arguments, -1);
  };
  BigNumber2.minimum = BigNumber2.min = function() {
    return maxOrMin(arguments, 1);
  };
  BigNumber2.random = function() {
    var pow2_53 = 9007199254740992;
    var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
      return mathfloor(Math.random() * pow2_53);
    } : function() {
      return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
    };
    return function(dp) {
      var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
      if (dp == null)
        dp = DECIMAL_PLACES;
      else
        intCheck(dp, 0, MAX);
      k = mathceil(dp / LOG_BASE);
      if (CRYPTO) {
        if (crypto.getRandomValues) {
          a = crypto.getRandomValues(new Uint32Array(k *= 2));
          for (; i < k; ) {
            v = a[i] * 131072 + (a[i + 1] >>> 11);
            if (v >= 9e15) {
              b = crypto.getRandomValues(new Uint32Array(2));
              a[i] = b[0];
              a[i + 1] = b[1];
            } else {
              c.push(v % 1e14);
              i += 2;
            }
          }
          i = k / 2;
        } else if (crypto.randomBytes) {
          a = crypto.randomBytes(k *= 7);
          for (; i < k; ) {
            v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
            if (v >= 9e15) {
              crypto.randomBytes(7).copy(a, i);
            } else {
              c.push(v % 1e14);
              i += 7;
            }
          }
          i = k / 7;
        } else {
          CRYPTO = false;
          throw Error(bignumberError + "crypto unavailable");
        }
      }
      if (!CRYPTO) {
        for (; i < k; ) {
          v = random53bitInt();
          if (v < 9e15)
            c[i++] = v % 1e14;
        }
      }
      k = c[--i];
      dp %= LOG_BASE;
      if (k && dp) {
        v = POWS_TEN[LOG_BASE - dp];
        c[i] = mathfloor(k / v) * v;
      }
      for (; c[i] === 0; c.pop(), i--)
        ;
      if (i < 0) {
        c = [e = 0];
      } else {
        for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
          ;
        for (i = 1, v = c[0]; v >= 10; v /= 10, i++)
          ;
        if (i < LOG_BASE)
          e -= LOG_BASE - i;
      }
      rand.e = e;
      rand.c = c;
      return rand;
    };
  }();
  BigNumber2.sum = function() {
    var i = 1, args = arguments, sum = new BigNumber2(args[0]);
    for (; i < args.length; )
      sum = sum.plus(args[i++]);
    return sum;
  };
  convertBase = function() {
    var decimal = "0123456789";
    function toBaseOut(str, baseIn, baseOut, alphabet) {
      var j, arr = [0], arrL, i = 0, len = str.length;
      for (; i < len; ) {
        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
          ;
        arr[0] += alphabet.indexOf(str.charAt(i++));
        for (j = 0; j < arr.length; j++) {
          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] == null)
              arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }
      return arr.reverse();
    }
    return function(str, baseIn, baseOut, sign, callerIsToString) {
      var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
      if (i >= 0) {
        k = POW_PRECISION;
        POW_PRECISION = 0;
        str = str.replace(".", "");
        y = new BigNumber2(baseIn);
        x = y.pow(str.length - i);
        POW_PRECISION = k;
        y.c = toBaseOut(
          toFixedPoint(coeffToString(x.c), x.e, "0"),
          10,
          baseOut,
          decimal
        );
        y.e = y.c.length;
      }
      xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
      e = k = xc.length;
      for (; xc[--k] == 0; xc.pop())
        ;
      if (!xc[0])
        return alphabet.charAt(0);
      if (i < 0) {
        --e;
      } else {
        x.c = xc;
        x.e = e;
        x.s = sign;
        x = div(x, y, dp, rm, baseOut);
        xc = x.c;
        r = x.r;
        e = x.e;
      }
      d = e + dp + 1;
      i = xc[d];
      k = baseOut / 2;
      r = r || d < 0 || xc[d + 1] != null;
      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
      if (d < 1 || !xc[0]) {
        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
      } else {
        xc.length = d;
        if (r) {
          for (--baseOut; ++xc[--d] > baseOut; ) {
            xc[d] = 0;
            if (!d) {
              ++e;
              xc = [1].concat(xc);
            }
          }
        }
        for (k = xc.length; !xc[--k]; )
          ;
        for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]))
          ;
        str = toFixedPoint(str, e, alphabet.charAt(0));
      }
      return str;
    };
  }();
  div = function() {
    function multiply(x, k, base) {
      var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
      for (x = x.slice(); i--; ) {
        xlo = x[i] % SQRT_BASE;
        xhi = x[i] / SQRT_BASE | 0;
        m = khi * xlo + xhi * klo;
        temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
        x[i] = temp % base;
      }
      if (carry)
        x = [carry].concat(x);
      return x;
    }
    function compare2(a, b, aL, bL) {
      var i, cmp;
      if (aL != bL) {
        cmp = aL > bL ? 1 : -1;
      } else {
        for (i = cmp = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            cmp = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }
      return cmp;
    }
    function subtract(a, b, aL, base) {
      var i = 0;
      for (; aL--; ) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }
      for (; !a[0] && a.length > 1; a.splice(0, 1))
        ;
    }
    return function(x, y, dp, rm, base) {
      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
      if (!xc || !xc[0] || !yc || !yc[0]) {
        return new BigNumber2(
          // Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
          )
        );
      }
      q = new BigNumber2(s);
      qc = q.c = [];
      e = x.e - y.e;
      s = dp + e + 1;
      if (!base) {
        base = BASE;
        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
        s = s / LOG_BASE | 0;
      }
      for (i = 0; yc[i] == (xc[i] || 0); i++)
        ;
      if (yc[i] > (xc[i] || 0))
        e--;
      if (s < 0) {
        qc.push(1);
        more = true;
      } else {
        xL = xc.length;
        yL = yc.length;
        i = 0;
        s += 2;
        n = mathfloor(base / (yc[0] + 1));
        if (n > 1) {
          yc = multiply(yc, n, base);
          xc = multiply(xc, n, base);
          yL = yc.length;
          xL = xc.length;
        }
        xi = yL;
        rem = xc.slice(0, yL);
        remL = rem.length;
        for (; remL < yL; rem[remL++] = 0)
          ;
        yz = yc.slice();
        yz = [0].concat(yz);
        yc0 = yc[0];
        if (yc[1] >= base / 2)
          yc0++;
        do {
          n = 0;
          cmp = compare2(yc, rem, yL, remL);
          if (cmp < 0) {
            rem0 = rem[0];
            if (yL != remL)
              rem0 = rem0 * base + (rem[1] || 0);
            n = mathfloor(rem0 / yc0);
            if (n > 1) {
              if (n >= base)
                n = base - 1;
              prod = multiply(yc, n, base);
              prodL = prod.length;
              remL = rem.length;
              while (compare2(prod, rem, prodL, remL) == 1) {
                n--;
                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                prodL = prod.length;
                cmp = 1;
              }
            } else {
              if (n == 0) {
                cmp = n = 1;
              }
              prod = yc.slice();
              prodL = prod.length;
            }
            if (prodL < remL)
              prod = [0].concat(prod);
            subtract(rem, prod, remL, base);
            remL = rem.length;
            if (cmp == -1) {
              while (compare2(yc, rem, yL, remL) < 1) {
                n++;
                subtract(rem, yL < remL ? yz : yc, remL, base);
                remL = rem.length;
              }
            }
          } else if (cmp === 0) {
            n++;
            rem = [0];
          }
          qc[i++] = n;
          if (rem[0]) {
            rem[remL++] = xc[xi] || 0;
          } else {
            rem = [xc[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] != null) && s--);
        more = rem[0] != null;
        if (!qc[0])
          qc.splice(0, 1);
      }
      if (base == BASE) {
        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++)
          ;
        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
      } else {
        q.e = e;
        q.r = +more;
      }
      return q;
    };
  }();
  function format(n, i, rm, id) {
    var c0, e, ne, len, str;
    if (rm == null)
      rm = ROUNDING_MODE;
    else
      intCheck(rm, 0, 8);
    if (!n.c)
      return n.toString();
    c0 = n.c[0];
    ne = n.e;
    if (i == null) {
      str = coeffToString(n.c);
      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
    } else {
      n = round(new BigNumber2(n), i, rm);
      e = n.e;
      str = coeffToString(n.c);
      len = str.length;
      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
        for (; len < i; str += "0", len++)
          ;
        str = toExponential(str, e);
      } else {
        i -= ne;
        str = toFixedPoint(str, e, "0");
        if (e + 1 > len) {
          if (--i > 0)
            for (str += "."; i--; str += "0")
              ;
        } else {
          i += e - len;
          if (i > 0) {
            if (e + 1 == len)
              str += ".";
            for (; i--; str += "0")
              ;
          }
        }
      }
    }
    return n.s < 0 && c0 ? "-" + str : str;
  }
  function maxOrMin(args, n) {
    var k, y, i = 1, x = new BigNumber2(args[0]);
    for (; i < args.length; i++) {
      y = new BigNumber2(args[i]);
      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
        x = y;
      }
    }
    return x;
  }
  function normalise(n, c, e) {
    var i = 1, j = c.length;
    for (; !c[--j]; c.pop())
      ;
    for (j = c[0]; j >= 10; j /= 10, i++)
      ;
    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
      n.c = n.e = null;
    } else if (e < MIN_EXP) {
      n.c = [n.e = 0];
    } else {
      n.e = e;
      n.c = c;
    }
    return n;
  }
  parseNumeric = function() {
    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
    return function(x, str, isNum, b) {
      var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
      if (isInfinityOrNaN.test(s)) {
        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
      } else {
        if (!isNum) {
          s = s.replace(basePrefix, function(m, p1, p2) {
            base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
            return !b || b == base ? p1 : m;
          });
          if (b) {
            base = b;
            s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
          }
          if (str != s)
            return new BigNumber2(s, base);
        }
        if (BigNumber2.DEBUG) {
          throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
        }
        x.s = null;
      }
      x.c = x.e = null;
    };
  }();
  function round(x, sd, rm, r) {
    var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
    if (xc) {
      out: {
        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
          ;
        i = sd - d;
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          n = xc[ni = 0];
          rd = mathfloor(n / pows10[d - j - 1] % 10);
        } else {
          ni = mathceil((i + 1) / LOG_BASE);
          if (ni >= xc.length) {
            if (r) {
              for (; xc.length <= ni; xc.push(0))
                ;
              n = rd = 0;
              d = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            n = k = xc[ni];
            for (d = 1; k >= 10; k /= 10, d++)
              ;
            i %= LOG_BASE;
            j = i - LOG_BASE + d;
            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
          }
        }
        r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
        r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
        if (sd < 1 || !xc[0]) {
          xc.length = 0;
          if (r) {
            sd -= x.e + 1;
            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
            x.e = -sd || 0;
          } else {
            xc[0] = x.e = 0;
          }
          return x;
        }
        if (i == 0) {
          xc.length = ni;
          k = 1;
          ni--;
        } else {
          xc.length = ni + 1;
          k = pows10[LOG_BASE - i];
          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
        }
        if (r) {
          for (; ; ) {
            if (ni == 0) {
              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++)
                ;
              j = xc[0] += k;
              for (k = 1; j >= 10; j /= 10, k++)
                ;
              if (i != k) {
                x.e++;
                if (xc[0] == BASE)
                  xc[0] = 1;
              }
              break;
            } else {
              xc[ni] += k;
              if (xc[ni] != BASE)
                break;
              xc[ni--] = 0;
              k = 1;
            }
          }
        }
        for (i = xc.length; xc[--i] === 0; xc.pop())
          ;
      }
      if (x.e > MAX_EXP) {
        x.c = x.e = null;
      } else if (x.e < MIN_EXP) {
        x.c = [x.e = 0];
      }
    }
    return x;
  }
  function valueOf(n) {
    var str, e = n.e;
    if (e === null)
      return n.toString();
    str = coeffToString(n.c);
    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
    return n.s < 0 ? "-" + str : str;
  }
  P.absoluteValue = P.abs = function() {
    var x = new BigNumber2(this);
    if (x.s < 0)
      x.s = 1;
    return x;
  };
  P.comparedTo = function(y, b) {
    return compare(this, new BigNumber2(y, b));
  };
  P.decimalPlaces = P.dp = function(dp, rm) {
    var c, n, v, x = this;
    if (dp != null) {
      intCheck(dp, 0, MAX);
      if (rm == null)
        rm = ROUNDING_MODE;
      else
        intCheck(rm, 0, 8);
      return round(new BigNumber2(x), dp + x.e + 1, rm);
    }
    if (!(c = x.c))
      return null;
    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
    if (v = c[v])
      for (; v % 10 == 0; v /= 10, n--)
        ;
    if (n < 0)
      n = 0;
    return n;
  };
  P.dividedBy = P.div = function(y, b) {
    return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
  };
  P.dividedToIntegerBy = P.idiv = function(y, b) {
    return div(this, new BigNumber2(y, b), 0, 1);
  };
  P.exponentiatedBy = P.pow = function(n, m) {
    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
    n = new BigNumber2(n);
    if (n.c && !n.isInteger()) {
      throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
    }
    if (m != null)
      m = new BigNumber2(m);
    nIsBig = n.e > 14;
    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
      y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
      return m ? y.mod(m) : y;
    }
    nIsNeg = n.s < 0;
    if (m) {
      if (m.c ? !m.c[0] : !m.s)
        return new BigNumber2(NaN);
      isModExp = !nIsNeg && x.isInteger() && m.isInteger();
      if (isModExp)
        x = x.mod(m);
    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
      k = x.s < 0 && isOdd(n) ? -0 : 0;
      if (x.e > -1)
        k = 1 / k;
      return new BigNumber2(nIsNeg ? 1 / k : k);
    } else if (POW_PRECISION) {
      k = mathceil(POW_PRECISION / LOG_BASE + 2);
    }
    if (nIsBig) {
      half = new BigNumber2(0.5);
      if (nIsNeg)
        n.s = 1;
      nIsOdd = isOdd(n);
    } else {
      i = Math.abs(+valueOf(n));
      nIsOdd = i % 2;
    }
    y = new BigNumber2(ONE);
    for (; ; ) {
      if (nIsOdd) {
        y = y.times(x);
        if (!y.c)
          break;
        if (k) {
          if (y.c.length > k)
            y.c.length = k;
        } else if (isModExp) {
          y = y.mod(m);
        }
      }
      if (i) {
        i = mathfloor(i / 2);
        if (i === 0)
          break;
        nIsOdd = i % 2;
      } else {
        n = n.times(half);
        round(n, n.e + 1, 1);
        if (n.e > 14) {
          nIsOdd = isOdd(n);
        } else {
          i = +valueOf(n);
          if (i === 0)
            break;
          nIsOdd = i % 2;
        }
      }
      x = x.times(x);
      if (k) {
        if (x.c && x.c.length > k)
          x.c.length = k;
      } else if (isModExp) {
        x = x.mod(m);
      }
    }
    if (isModExp)
      return y;
    if (nIsNeg)
      y = ONE.div(y);
    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
  };
  P.integerValue = function(rm) {
    var n = new BigNumber2(this);
    if (rm == null)
      rm = ROUNDING_MODE;
    else
      intCheck(rm, 0, 8);
    return round(n, n.e + 1, rm);
  };
  P.isEqualTo = P.eq = function(y, b) {
    return compare(this, new BigNumber2(y, b)) === 0;
  };
  P.isFinite = function() {
    return !!this.c;
  };
  P.isGreaterThan = P.gt = function(y, b) {
    return compare(this, new BigNumber2(y, b)) > 0;
  };
  P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
    return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
  };
  P.isInteger = function() {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  };
  P.isLessThan = P.lt = function(y, b) {
    return compare(this, new BigNumber2(y, b)) < 0;
  };
  P.isLessThanOrEqualTo = P.lte = function(y, b) {
    return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
  };
  P.isNaN = function() {
    return !this.s;
  };
  P.isNegative = function() {
    return this.s < 0;
  };
  P.isPositive = function() {
    return this.s > 0;
  };
  P.isZero = function() {
    return !!this.c && this.c[0] == 0;
  };
  P.minus = function(y, b) {
    var i, j, t, xLTy, x = this, a = x.s;
    y = new BigNumber2(y, b);
    b = y.s;
    if (!a || !b)
      return new BigNumber2(NaN);
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }
    var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
    if (!xe || !ye) {
      if (!xc || !yc)
        return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
      if (!xc[0] || !yc[0]) {
        return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          ROUNDING_MODE == 3 ? -0 : 0
        ));
      }
    }
    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();
    if (a = xe - ye) {
      if (xLTy = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }
      t.reverse();
      for (b = a; b--; t.push(0))
        ;
      t.reverse();
    } else {
      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
      for (a = b = 0; b < j; b++) {
        if (xc[b] != yc[b]) {
          xLTy = xc[b] < yc[b];
          break;
        }
      }
    }
    if (xLTy) {
      t = xc;
      xc = yc;
      yc = t;
      y.s = -y.s;
    }
    b = (j = yc.length) - (i = xc.length);
    if (b > 0)
      for (; b--; xc[i++] = 0)
        ;
    b = BASE - 1;
    for (; j > a; ) {
      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i]; xc[i] = b)
          ;
        --xc[i];
        xc[j] += BASE;
      }
      xc[j] -= yc[j];
    }
    for (; xc[0] == 0; xc.splice(0, 1), --ye)
      ;
    if (!xc[0]) {
      y.s = ROUNDING_MODE == 3 ? -1 : 1;
      y.c = [y.e = 0];
      return y;
    }
    return normalise(y, xc, ye);
  };
  P.modulo = P.mod = function(y, b) {
    var q, s, x = this;
    y = new BigNumber2(y, b);
    if (!x.c || !y.s || y.c && !y.c[0]) {
      return new BigNumber2(NaN);
    } else if (!y.c || x.c && !x.c[0]) {
      return new BigNumber2(x);
    }
    if (MODULO_MODE == 9) {
      s = y.s;
      y.s = 1;
      q = div(x, y, 0, 3);
      y.s = s;
      q.s *= s;
    } else {
      q = div(x, y, 0, MODULO_MODE);
    }
    y = x.minus(q.times(y));
    if (!y.c[0] && MODULO_MODE == 1)
      y.s = x.s;
    return y;
  };
  P.multipliedBy = P.times = function(y, b) {
    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
    if (!xc || !yc || !xc[0] || !yc[0]) {
      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
        y.c = y.e = y.s = null;
      } else {
        y.s *= x.s;
        if (!xc || !yc) {
          y.c = y.e = null;
        } else {
          y.c = [0];
          y.e = 0;
        }
      }
      return y;
    }
    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
    y.s *= x.s;
    xcL = xc.length;
    ycL = yc.length;
    if (xcL < ycL) {
      zc = xc;
      xc = yc;
      yc = zc;
      i = xcL;
      xcL = ycL;
      ycL = i;
    }
    for (i = xcL + ycL, zc = []; i--; zc.push(0))
      ;
    base = BASE;
    sqrtBase = SQRT_BASE;
    for (i = ycL; --i >= 0; ) {
      c = 0;
      ylo = yc[i] % sqrtBase;
      yhi = yc[i] / sqrtBase | 0;
      for (k = xcL, j = i + k; j > i; ) {
        xlo = xc[--k] % sqrtBase;
        xhi = xc[k] / sqrtBase | 0;
        m = yhi * xlo + xhi * ylo;
        xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
        zc[j--] = xlo % base;
      }
      zc[j] = c;
    }
    if (c) {
      ++e;
    } else {
      zc.splice(0, 1);
    }
    return normalise(y, zc, e);
  };
  P.negated = function() {
    var x = new BigNumber2(this);
    x.s = -x.s || null;
    return x;
  };
  P.plus = function(y, b) {
    var t, x = this, a = x.s;
    y = new BigNumber2(y, b);
    b = y.s;
    if (!a || !b)
      return new BigNumber2(NaN);
    if (a != b) {
      y.s = -b;
      return x.minus(y);
    }
    var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
    if (!xe || !ye) {
      if (!xc || !yc)
        return new BigNumber2(a / 0);
      if (!xc[0] || !yc[0])
        return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
    }
    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();
    if (a = xe - ye) {
      if (a > 0) {
        ye = xe;
        t = yc;
      } else {
        a = -a;
        t = xc;
      }
      t.reverse();
      for (; a--; t.push(0))
        ;
      t.reverse();
    }
    a = xc.length;
    b = yc.length;
    if (a - b < 0) {
      t = yc;
      yc = xc;
      xc = t;
      b = a;
    }
    for (a = 0; b; ) {
      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
    }
    if (a) {
      xc = [a].concat(xc);
      ++ye;
    }
    return normalise(y, xc, ye);
  };
  P.precision = P.sd = function(sd, rm) {
    var c, n, v, x = this;
    if (sd != null && sd !== !!sd) {
      intCheck(sd, 1, MAX);
      if (rm == null)
        rm = ROUNDING_MODE;
      else
        intCheck(rm, 0, 8);
      return round(new BigNumber2(x), sd, rm);
    }
    if (!(c = x.c))
      return null;
    v = c.length - 1;
    n = v * LOG_BASE + 1;
    if (v = c[v]) {
      for (; v % 10 == 0; v /= 10, n--)
        ;
      for (v = c[0]; v >= 10; v /= 10, n++)
        ;
    }
    if (sd && x.e + 1 > n)
      n = x.e + 1;
    return n;
  };
  P.shiftedBy = function(k) {
    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    return this.times("1e" + k);
  };
  P.squareRoot = P.sqrt = function() {
    var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
    if (s !== 1 || !c || !c[0]) {
      return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
    }
    s = Math.sqrt(+valueOf(x));
    if (s == 0 || s == 1 / 0) {
      n = coeffToString(c);
      if ((n.length + e) % 2 == 0)
        n += "0";
      s = Math.sqrt(+n);
      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
      if (s == 1 / 0) {
        n = "5e" + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf("e") + 1) + e;
      }
      r = new BigNumber2(n);
    } else {
      r = new BigNumber2(s + "");
    }
    if (r.c[0]) {
      e = r.e;
      s = e + dp;
      if (s < 3)
        s = 0;
      for (; ; ) {
        t = r;
        r = half.times(t.plus(div(x, t, dp, 1)));
        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
          if (r.e < e)
            --s;
          n = n.slice(s - 3, s + 1);
          if (n == "9999" || !rep && n == "4999") {
            if (!rep) {
              round(t, t.e + DECIMAL_PLACES + 2, 0);
              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }
            dp += 4;
            s += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
              round(r, r.e + DECIMAL_PLACES + 2, 1);
              m = !r.times(r).eq(x);
            }
            break;
          }
        }
      }
    }
    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
  };
  P.toExponential = function(dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp++;
    }
    return format(this, dp, rm, 1);
  };
  P.toFixed = function(dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp = dp + this.e + 1;
    }
    return format(this, dp, rm);
  };
  P.toFormat = function(dp, rm, format2) {
    var str, x = this;
    if (format2 == null) {
      if (dp != null && rm && typeof rm == "object") {
        format2 = rm;
        rm = null;
      } else if (dp && typeof dp == "object") {
        format2 = dp;
        dp = rm = null;
      } else {
        format2 = FORMAT;
      }
    } else if (typeof format2 != "object") {
      throw Error(bignumberError + "Argument not an object: " + format2);
    }
    str = x.toFixed(dp, rm);
    if (x.c) {
      var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
      if (g2) {
        i = g1;
        g1 = g2;
        g2 = i;
        len -= i;
      }
      if (g1 > 0 && len > 0) {
        i = len % g1 || g1;
        intPart = intDigits.substr(0, i);
        for (; i < len; i += g1)
          intPart += groupSeparator + intDigits.substr(i, g1);
        if (g2 > 0)
          intPart += groupSeparator + intDigits.slice(i);
        if (isNeg)
          intPart = "-" + intPart;
      }
      str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
        new RegExp("\\d{" + g2 + "}\\B", "g"),
        "$&" + (format2.fractionGroupSeparator || "")
      ) : fractionPart) : intPart;
    }
    return (format2.prefix || "") + str + (format2.suffix || "");
  };
  P.toFraction = function(md) {
    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
    if (md != null) {
      n = new BigNumber2(md);
      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
        throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
      }
    }
    if (!xc)
      return new BigNumber2(x);
    d = new BigNumber2(ONE);
    n1 = d0 = new BigNumber2(ONE);
    d1 = n0 = new BigNumber2(ONE);
    s = coeffToString(xc);
    e = d.e = s.length - x.e - 1;
    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
    exp = MAX_EXP;
    MAX_EXP = 1 / 0;
    n = new BigNumber2(s);
    n0.c[0] = 0;
    for (; ; ) {
      q = div(n, d, 0, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.comparedTo(md) == 1)
        break;
      d0 = d1;
      d1 = d2;
      n1 = n0.plus(q.times(d2 = n1));
      n0 = d2;
      d = n.minus(q.times(d2 = d));
      n = d2;
    }
    d2 = div(md.minus(d0), d1, 0, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;
    e = e * 2;
    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
      div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
    ) < 1 ? [n1, d1] : [n0, d0];
    MAX_EXP = exp;
    return r;
  };
  P.toNumber = function() {
    return +valueOf(this);
  };
  P.toPrecision = function(sd, rm) {
    if (sd != null)
      intCheck(sd, 1, MAX);
    return format(this, sd, rm, 2);
  };
  P.toString = function(b) {
    var str, n = this, s = n.s, e = n.e;
    if (e === null) {
      if (s) {
        str = "Infinity";
        if (s < 0)
          str = "-" + str;
      } else {
        str = "NaN";
      }
    } else {
      if (b == null) {
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
      } else if (b === 10 && alphabetHasNormalDecimalDigits) {
        n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
        str = toFixedPoint(coeffToString(n.c), n.e, "0");
      } else {
        intCheck(b, 2, ALPHABET.length, "Base");
        str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
      }
      if (s < 0 && n.c[0])
        str = "-" + str;
    }
    return str;
  };
  P.valueOf = P.toJSON = function() {
    return valueOf(this);
  };
  P._isBigNumber = true;
  P[Symbol.toStringTag] = "BigNumber";
  P[Symbol.for("nodejs.util.inspect.custom")] = P.valueOf;
  if (configObject != null)
    BigNumber2.set(configObject);
  return BigNumber2;
}
function bitFloor(n) {
  var i = n | 0;
  return n > 0 || n === i ? i : i - 1;
}
function coeffToString(a) {
  var s, z, i = 1, j = a.length, r = a[0] + "";
  for (; i < j; ) {
    s = a[i++] + "";
    z = LOG_BASE - s.length;
    for (; z--; s = "0" + s)
      ;
    r += s;
  }
  for (j = r.length; r.charCodeAt(--j) === 48; )
    ;
  return r.slice(0, j + 1 || 1);
}
function compare(x, y) {
  var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
  if (!i || !j)
    return null;
  a = xc && !xc[0];
  b = yc && !yc[0];
  if (a || b)
    return a ? b ? 0 : -j : i;
  if (i != j)
    return i;
  a = i < 0;
  b = k == l;
  if (!xc || !yc)
    return b ? 0 : !xc ^ a ? 1 : -1;
  if (!b)
    return k > l ^ a ? 1 : -1;
  j = (k = xc.length) < (l = yc.length) ? k : l;
  for (i = 0; i < j; i++)
    if (xc[i] != yc[i])
      return xc[i] > yc[i] ^ a ? 1 : -1;
  return k == l ? 0 : k > l ^ a ? 1 : -1;
}
function intCheck(n, min, max, name) {
  if (n < min || n > max || n !== mathfloor(n)) {
    throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
  }
}
function isOdd(n) {
  var k = n.c.length - 1;
  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
}
function toExponential(str, e) {
  return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
}
function toFixedPoint(str, e, z) {
  var len, zs;
  if (e < 0) {
    for (zs = z + "."; ++e; zs += z)
      ;
    str = zs + str;
  } else {
    len = str.length;
    if (++e > len) {
      for (zs = z, e -= len; --e; zs += z)
        ;
      str += zs;
    } else if (e < len) {
      str = str.slice(0, e) + "." + str.slice(e);
    }
  }
  return str;
}
var BigNumber = clone();

// ../../node_modules/@injectivelabs/utils/dist/esm/classes/BigNumber/BigNumber.js
var BigNumber_default = BigNumber;

// ../../node_modules/@injectivelabs/utils/dist/esm/classes/HttpClient.js
var import_axios = __toESM(require_axios2(), 1);

// ../../node_modules/@injectivelabs/utils/dist/esm/classes/HttpRestClient.js
var import_axios2 = __toESM(require_axios2(), 1);

// ../../node_modules/@injectivelabs/exceptions/dist/esm/types/modules.js
var ContractErrorModule;
(function(ContractErrorModule2) {
  ContractErrorModule2["Erc20Contract"] = "erc20-contract";
  ContractErrorModule2["Peggy"] = "peggy-contract";
  ContractErrorModule2["PeggyOld"] = "peggy-old-contract";
})(ContractErrorModule || (ContractErrorModule = {}));
var ChainErrorModule;
(function(ChainErrorModule2) {
  ChainErrorModule2["Auction"] = "chain-auction";
  ChainErrorModule2["Auth"] = "chain-auth";
  ChainErrorModule2["Authz"] = "chain-authz";
  ChainErrorModule2["Bank"] = "chain-bank";
  ChainErrorModule2["Distribution"] = "chain-distribution";
  ChainErrorModule2["Exchange"] = "chain-exchange";
  ChainErrorModule2["Gov"] = "chain-gov";
  ChainErrorModule2["Ibc"] = "chain-ibc";
  ChainErrorModule2["InsuranceFund"] = "chain-insurance";
  ChainErrorModule2["Mint"] = "chain-mint";
  ChainErrorModule2["Oracle"] = "chain-oracle";
  ChainErrorModule2["Peggy"] = "chain-peggy";
  ChainErrorModule2["Staking"] = "chain-staking";
  ChainErrorModule2["Wasm"] = "chain-wasm";
  ChainErrorModule2["WasmX"] = "chain-wasmx";
  ChainErrorModule2["Tendermint"] = "chain-tendermint";
})(ChainErrorModule || (ChainErrorModule = {}));
var IndexerErrorModule;
(function(IndexerErrorModule2) {
  IndexerErrorModule2["Account"] = "indexer-account";
  IndexerErrorModule2["Auction"] = "indexer-auction";
  IndexerErrorModule2["Derivatives"] = "indexer-derivatives";
  IndexerErrorModule2["Explorer"] = "indexer-explorer";
  IndexerErrorModule2["InsuranceFund"] = "indexer-insurance-fund";
  IndexerErrorModule2["Meta"] = "indexer-meta";
  IndexerErrorModule2["Mito"] = "indexer-mito";
  IndexerErrorModule2["Dmm"] = "dmm";
  IndexerErrorModule2["Oracle"] = "indexer-oracle";
  IndexerErrorModule2["Portfolio"] = "indexer-portfolio";
  IndexerErrorModule2["Spot"] = "indexer-spot";
  IndexerErrorModule2["Transaction"] = "indexer-transaction";
  IndexerErrorModule2["Trading"] = "indexer-trading";
  IndexerErrorModule2["ChronosDerivative"] = "indexer-chronos-derivative";
  IndexerErrorModule2["ChronosSpot"] = "indexer-chronos-spot";
  IndexerErrorModule2["ChronosMarkets"] = "indexer-chronos-markets";
  IndexerErrorModule2["Campaign"] = "indexer-campaign";
})(IndexerErrorModule || (IndexerErrorModule = {}));
var WalletErrorActionModule;
(function(WalletErrorActionModule2) {
  WalletErrorActionModule2["SignTransaction"] = "sign-transaction";
  WalletErrorActionModule2["SignEthereumTransaction"] = "sign-ethereum-transaction";
  WalletErrorActionModule2["SendTransaction"] = "send-transaction";
  WalletErrorActionModule2["SendEthereumTransaction"] = "send-ethereum-transaction";
  WalletErrorActionModule2["SignArbitrary"] = "sign-arbitrary";
  WalletErrorActionModule2["GetAccounts"] = "get-accounts";
  WalletErrorActionModule2["GetNetworkId"] = "get-network-id";
  WalletErrorActionModule2["GetChainId"] = "get-chain-id";
  WalletErrorActionModule2["GetEthereumTransactionReceipt"] = "get-ethereum-transaction-receipt";
})(WalletErrorActionModule || (WalletErrorActionModule = {}));

// ../../node_modules/@injectivelabs/exceptions/dist/esm/types/codes.js
var TransactionChainErrorModule;
(function(TransactionChainErrorModule2) {
  TransactionChainErrorModule2["Auction"] = "auction";
  TransactionChainErrorModule2["CosmosSdk"] = "sdk";
  TransactionChainErrorModule2["Staking"] = "staking";
  TransactionChainErrorModule2["Bank"] = "bank";
  TransactionChainErrorModule2["Distribution"] = "distribution";
  TransactionChainErrorModule2["Gov"] = "gov";
  TransactionChainErrorModule2["Exchange"] = "exchange";
  TransactionChainErrorModule2["Insurance"] = "insurance";
  TransactionChainErrorModule2["Ocr"] = "ocr";
  TransactionChainErrorModule2["Oracle"] = "oracle";
  TransactionChainErrorModule2["Peggy"] = "peggy";
  TransactionChainErrorModule2["TokenFactory"] = "tokenfactory";
  TransactionChainErrorModule2["Wasmx"] = "wasmx";
  TransactionChainErrorModule2["Wasm"] = "wasm";
  TransactionChainErrorModule2["AuthZ"] = "authz";
})(TransactionChainErrorModule || (TransactionChainErrorModule = {}));
var ChainCosmosErrorCode;
(function(ChainCosmosErrorCode2) {
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrTxDecode"] = 2] = "ErrTxDecode";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidSequence"] = 3] = "ErrInvalidSequence";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrUnauthorized"] = 4] = "ErrUnauthorized";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInsufficientFunds"] = 5] = "ErrInsufficientFunds";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrUnknownRequest"] = 6] = "ErrUnknownRequest";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidAddress"] = 7] = "ErrInvalidAddress";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidPubKey"] = 8] = "ErrInvalidPubKey";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrUnknownAddress"] = 9] = "ErrUnknownAddress";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidCoins"] = 10] = "ErrInvalidCoins";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrOutOfGas"] = 11] = "ErrOutOfGas";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrMemoTooLarge"] = 12] = "ErrMemoTooLarge";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInsufficientFee"] = 13] = "ErrInsufficientFee";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrTooManySignatures"] = 14] = "ErrTooManySignatures";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrNoSignatures"] = 15] = "ErrNoSignatures";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrJSONMarshal"] = 16] = "ErrJSONMarshal";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrJSONUnmarshal"] = 17] = "ErrJSONUnmarshal";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidRequest"] = 18] = "ErrInvalidRequest";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrTxInMempoolCache"] = 19] = "ErrTxInMempoolCache";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrMempoolIsFull"] = 20] = "ErrMempoolIsFull";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrTxTooLarge"] = 21] = "ErrTxTooLarge";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrKeyNotFound"] = 22] = "ErrKeyNotFound";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrWrongPassword"] = 23] = "ErrWrongPassword";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrorInvalidSigner"] = 24] = "ErrorInvalidSigner";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrorInvalidGasAdjustment"] = 25] = "ErrorInvalidGasAdjustment";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidHeight"] = 26] = "ErrInvalidHeight";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidVersion"] = 27] = "ErrInvalidVersion";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidChainID"] = 28] = "ErrInvalidChainID";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidType"] = 29] = "ErrInvalidType";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrTxTimeoutHeight"] = 30] = "ErrTxTimeoutHeight";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrUnknownExtensionOptions"] = 31] = "ErrUnknownExtensionOptions";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrWrongSequence"] = 32] = "ErrWrongSequence";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrPackAny"] = 33] = "ErrPackAny";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrUnpackAny"] = 34] = "ErrUnpackAny";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrLogic"] = 35] = "ErrLogic";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrConflict"] = 36] = "ErrConflict";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrNotSupported"] = 37] = "ErrNotSupported";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrNotFound"] = 38] = "ErrNotFound";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrIO"] = 39] = "ErrIO";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrAppConfig"] = 40] = "ErrAppConfig";
  ChainCosmosErrorCode2[ChainCosmosErrorCode2["ErrInvalidGasLimit"] = 41] = "ErrInvalidGasLimit";
})(ChainCosmosErrorCode || (ChainCosmosErrorCode = {}));
var ChainExchangeModuleErrorCode;
(function(ChainExchangeModuleErrorCode2) {
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrOrderInvalid"] = 1] = "ErrOrderInvalid";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrSpotMarketNotFound"] = 2] = "ErrSpotMarketNotFound";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrSpotMarketExists"] = 3] = "ErrSpotMarketExists";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrBadField"] = 4] = "ErrBadField";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrMarketInvalid"] = 5] = "ErrMarketInvalid";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInsufficientDeposit"] = 6] = "ErrInsufficientDeposit";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrUnrecognizedOrderType"] = 7] = "ErrUnrecognizedOrderType";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInsufficientPositionQuantity"] = 8] = "ErrInsufficientPositionQuantity";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrOrderHashInvalid"] = 9] = "ErrOrderHashInvalid";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrBadSubaccountID"] = 10] = "ErrBadSubaccountID";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidTicker"] = 11] = "ErrInvalidTicker";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidBaseDenom"] = 12] = "ErrInvalidBaseDenom";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidQuoteDenom"] = 13] = "ErrInvalidQuoteDenom";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidOracle"] = 14] = "ErrInvalidOracle";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidExpiry"] = 15] = "ErrInvalidExpiry";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidPrice"] = 16] = "ErrInvalidPrice";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidQuantity"] = 17] = "ErrInvalidQuantity";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrUnsupportedOracleType"] = 18] = "ErrUnsupportedOracleType";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrOrderDoesntExist"] = 19] = "ErrOrderDoesntExist";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrOrderbookFillInvalid"] = 20] = "ErrOrderbookFillInvalid";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrPerpetualMarketExists"] = 21] = "ErrPerpetualMarketExists";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrExpiryFuturesMarketExists"] = 22] = "ErrExpiryFuturesMarketExists";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrExpiryFuturesMarketExpired"] = 23] = "ErrExpiryFuturesMarketExpired";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrNoLiquidity"] = 24] = "ErrNoLiquidity";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrSlippageExceedsWorstPrice"] = 25] = "ErrSlippageExceedsWorstPrice";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInsufficientOrderMargin"] = 26] = "ErrInsufficientOrderMargin";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrDerivativeMarketNotFound"] = 27] = "ErrDerivativeMarketNotFound";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrPositionNotFound"] = 28] = "ErrPositionNotFound";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidReduceOnlyPositionDirection"] = 29] = "ErrInvalidReduceOnlyPositionDirection";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrPriceSurpassesBankruptcyPrice"] = 30] = "ErrPriceSurpassesBankruptcyPrice";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrPositionNotLiquidable"] = 31] = "ErrPositionNotLiquidable";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidTriggerPrice"] = 32] = "ErrInvalidTriggerPrice";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidOracleType"] = 33] = "ErrInvalidOracleType";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidPriceTickSize"] = 34] = "ErrInvalidPriceTickSize";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidQuantityTickSize"] = 35] = "ErrInvalidQuantityTickSize";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidMargin"] = 36] = "ErrInvalidMargin";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrExceedsOrderSideCount"] = 37] = "ErrExceedsOrderSideCount";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrMarketOrderAlreadyExists"] = 38] = "ErrMarketOrderAlreadyExists";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrConditionalMarketOrderAlreadyExists"] = 39] = "ErrConditionalMarketOrderAlreadyExists";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrMarketLaunchProposalAlreadyExists"] = 40] = "ErrMarketLaunchProposalAlreadyExists";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidMarketStatus"] = 41] = "ErrInvalidMarketStatus";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrSameDenoms"] = 42] = "ErrSameDenoms";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrSameOracles"] = 43] = "ErrSameOracles";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrFeeRatesRelation"] = 44] = "ErrFeeRatesRelation";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrMarginsRelation"] = 45] = "ErrMarginsRelation";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrExceedsMaxOracleScaleFactor"] = 46] = "ErrExceedsMaxOracleScaleFactor";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrSpotExchangeNotEnabled"] = 47] = "ErrSpotExchangeNotEnabled";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrDerivativesExchangeNotEnabled"] = 48] = "ErrDerivativesExchangeNotEnabled";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrOraclePriceDeltaExceedsThreshold"] = 49] = "ErrOraclePriceDeltaExceedsThreshold";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidHourlyInterestRate"] = 50] = "ErrInvalidHourlyInterestRate";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidHourlyFundingRateCap"] = 51] = "ErrInvalidHourlyFundingRateCap";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidMarketFundingParamUpdate"] = 52] = "ErrInvalidMarketFundingParamUpdate";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidTradingRewardCampaign"] = 53] = "ErrInvalidTradingRewardCampaign";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidFeeDiscountSchedule"] = 54] = "ErrInvalidFeeDiscountSchedule";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidLiquidationOrder"] = 55] = "ErrInvalidLiquidationOrder";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrTradingRewardCampaignDistributionError"] = 56] = "ErrTradingRewardCampaignDistributionError";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidTradingRewardsPendingPointsUpdate"] = 57] = "ErrInvalidTradingRewardsPendingPointsUpdate";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidBatchMsgUpdate"] = 58] = "ErrInvalidBatchMsgUpdate";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrExceedsTopOfBookPrice"] = 59] = "ErrExceedsTopOfBookPrice";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidOrderTypeForMessage"] = 60] = "ErrInvalidOrderTypeForMessage";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidDMMSender"] = 61] = "ErrInvalidDMMSender";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrAlreadyOptedOutOfRewards"] = 62] = "ErrAlreadyOptedOutOfRewards";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidMarginRatio"] = 63] = "ErrInvalidMarginRatio";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrBelowMinimalContribution"] = 64] = "ErrBelowMinimalContribution";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrLowPositionMargin"] = 65] = "ErrLowPositionMargin";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidTotalSupply"] = 66] = "ErrInvalidTotalSupply";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidLpTokenBurnAmount"] = 67] = "ErrInvalidLpTokenBurnAmount";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrUnsupportedAction"] = 68] = "ErrUnsupportedAction";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrNegativePositionQuantity"] = 69] = "ErrNegativePositionQuantity";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrBinaryOptionsMarketExists"] = 70] = "ErrBinaryOptionsMarketExists";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrBinaryOptionsMarketNotFound"] = 71] = "ErrBinaryOptionsMarketNotFound";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidSettlement"] = 72] = "ErrInvalidSettlement";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrAccountDoesntExist"] = 73] = "ErrAccountDoesntExist";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrSenderIsNotAnAdmin"] = 74] = "ErrSenderIsNotAnAdmin";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrMarketAlreadyScheduledToSettle"] = 75] = "ErrMarketAlreadyScheduledToSettle";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrGenericMarketNotFound"] = 76] = "ErrGenericMarketNotFound";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidDenomDecimal"] = 77] = "ErrInvalidDenomDecimal";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidState"] = 78] = "ErrInvalidState";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrTransientOrdersUpToCancelNotSupported"] = 79] = "ErrTransientOrdersUpToCancelNotSupported";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidTrade"] = 80] = "ErrInvalidTrade";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrNoMarginLocked"] = 81] = "ErrNoMarginLocked";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidAccessLevel"] = 82] = "ErrInvalidAccessLevel";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidAddress"] = 83] = "ErrInvalidAddress";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidArgument"] = 84] = "ErrInvalidArgument";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidFundsDirection"] = 85] = "ErrInvalidFundsDirection";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrNoFundsProvided"] = 86] = "ErrNoFundsProvided";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidSignature"] = 87] = "ErrInvalidSignature";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrNoFundsToUnlock"] = 88] = "ErrNoFundsToUnlock";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrNoMsgsProvided"] = 89] = "ErrNoMsgsProvided";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrNoMsgProvided"] = 90] = "ErrNoMsgProvided";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrInvalidAmount"] = 91] = "ErrInvalidAmount";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrFeatureDisabled"] = 92] = "ErrFeatureDisabled";
  ChainExchangeModuleErrorCode2[ChainExchangeModuleErrorCode2["ErrTooMuchOrderMargin"] = 93] = "ErrTooMuchOrderMargin";
})(ChainExchangeModuleErrorCode || (ChainExchangeModuleErrorCode = {}));
var ChainAuctionErrorCodes;
(function(ChainAuctionErrorCodes2) {
  ChainAuctionErrorCodes2[ChainAuctionErrorCodes2["ErrBidInvalid"] = 1] = "ErrBidInvalid";
  ChainAuctionErrorCodes2[ChainAuctionErrorCodes2["ErrBidRound"] = 2] = "ErrBidRound";
})(ChainAuctionErrorCodes || (ChainAuctionErrorCodes = {}));
var ChainAuthZErrorCodes;
(function(ChainAuthZErrorCodes2) {
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrNoAuthorizationFound"] = 2] = "ErrNoAuthorizationFound";
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrInvalidExpirationTime"] = 3] = "ErrInvalidExpirationTime";
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrUnknownAuthorizationType"] = 4] = "ErrUnknownAuthorizationType";
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrNoGrantKeyFound"] = 5] = "ErrNoGrantKeyFound";
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrAuthorizationExpired"] = 6] = "ErrAuthorizationExpired";
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrGranteeIsGranter"] = 7] = "ErrGranteeIsGranter";
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrAuthorizationNumOfSigners"] = 9] = "ErrAuthorizationNumOfSigners";
  ChainAuthZErrorCodes2[ChainAuthZErrorCodes2["ErrNegativeMaxTokens"] = 12] = "ErrNegativeMaxTokens";
})(ChainAuthZErrorCodes || (ChainAuthZErrorCodes = {}));
var ChainInsuranceErrorCodes;
(function(ChainInsuranceErrorCodes2) {
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInsuranceFundAlreadyExists"] = 1] = "ErrInsuranceFundAlreadyExists";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInsuranceFundNotFound"] = 2] = "ErrInsuranceFundNotFound";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrRedemptionAlreadyExists"] = 3] = "ErrRedemptionAlreadyExists";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidDepositAmount"] = 4] = "ErrInvalidDepositAmount";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidDepositDenom"] = 5] = "ErrInvalidDepositDenom";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrPayoutTooLarge"] = 6] = "ErrPayoutTooLarge";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidTicker"] = 7] = "ErrInvalidTicker";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidQuoteDenom"] = 8] = "ErrInvalidQuoteDenom";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidOracle"] = 9] = "ErrInvalidOracle";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidExpirationTime"] = 10] = "ErrInvalidExpirationTime";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidMarketID"] = 11] = "ErrInvalidMarketID";
  ChainInsuranceErrorCodes2[ChainInsuranceErrorCodes2["ErrInvalidShareDenom"] = 12] = "ErrInvalidShareDenom";
})(ChainInsuranceErrorCodes || (ChainInsuranceErrorCodes = {}));
var ChainOcrErrorCodes;
(function(ChainOcrErrorCodes2) {
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrStaleReport"] = 1] = "ErrStaleReport";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrIncompleteProposal"] = 2] = "ErrIncompleteProposal";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrRepeatedAddress"] = 3] = "ErrRepeatedAddress";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrTooManySigners"] = 4] = "ErrTooManySigners";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrIncorrectConfig"] = 5] = "ErrIncorrectConfig";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrConfigDigestNotMatch"] = 6] = "ErrConfigDigestNotMatch";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrWrongNumberOfSignatures"] = 7] = "ErrWrongNumberOfSignatures";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrIncorrectSignature"] = 8] = "ErrIncorrectSignature";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrNoTransmitter"] = 9] = "ErrNoTransmitter";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrIncorrectTransmissionData"] = 10] = "ErrIncorrectTransmissionData";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrNoTransmissionsFound"] = 11] = "ErrNoTransmissionsFound";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrMedianValueOutOfBounds"] = 12] = "ErrMedianValueOutOfBounds";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrIncorrectRewardPoolDenom"] = 13] = "ErrIncorrectRewardPoolDenom";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrNoRewardPool"] = 14] = "ErrNoRewardPool";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrInvalidPayees"] = 15] = "ErrInvalidPayees";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrModuleAdminRestricted"] = 16] = "ErrModuleAdminRestricted";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrFeedAlreadyExists"] = 17] = "ErrFeedAlreadyExists";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrFeedDoesntExists"] = 19] = "ErrFeedDoesntExists";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrAdminRestricted"] = 20] = "ErrAdminRestricted";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrInsufficientRewardPool"] = 21] = "ErrInsufficientRewardPool";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrPayeeAlreadySet"] = 22] = "ErrPayeeAlreadySet";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrPayeeRestricted"] = 23] = "ErrPayeeRestricted";
  ChainOcrErrorCodes2[ChainOcrErrorCodes2["ErrFeedConfigNotFound"] = 24] = "ErrFeedConfigNotFound";
})(ChainOcrErrorCodes || (ChainOcrErrorCodes = {}));
var ChainOracleErrorCodes;
(function(ChainOracleErrorCodes2) {
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrEmptyRelayerAddr"] = 1] = "ErrEmptyRelayerAddr";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadRatesCount"] = 2] = "ErrBadRatesCount";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadResolveTimesCount"] = 3] = "ErrBadResolveTimesCount";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadRequestIDsCount"] = 4] = "ErrBadRequestIDsCount";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrRelayerNotAuthorized"] = 5] = "ErrRelayerNotAuthorized";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadPriceFeedBaseCount"] = 6] = "ErrBadPriceFeedBaseCount";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadPriceFeedQuoteCount"] = 7] = "ErrBadPriceFeedQuoteCount";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrUnsupportedOracleType"] = 8] = "ErrUnsupportedOracleType";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadMessagesCount"] = 9] = "ErrBadMessagesCount";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadCoinbaseMessage"] = 10] = "ErrBadCoinbaseMessage";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidEthereumSignature"] = 11] = "ErrInvalidEthereumSignature";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadCoinbaseMessageTimestamp"] = 12] = "ErrBadCoinbaseMessageTimestamp";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrCoinbasePriceNotFound"] = 13] = "ErrCoinbasePriceNotFound";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadPrice"] = 14] = "ErrBadPrice";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrPriceTooLarge"] = 15] = "ErrPriceTooLarge";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidBandIBCRequest"] = 16] = "ErrInvalidBandIBCRequest";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrSample"] = 17] = "ErrSample";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidPacketTimeout"] = 18] = "ErrInvalidPacketTimeout";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadSymbolsCount"] = 19] = "ErrBadSymbolsCount";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadIBCPortBind"] = 20] = "ErrBadIBCPortBind";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidPortID"] = 21] = "ErrInvalidPortID";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidChannelID"] = 22] = "ErrInvalidChannelID";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBadRequestInterval"] = 23] = "ErrBadRequestInterval";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidBandIBCUpdateRequest"] = 24] = "ErrInvalidBandIBCUpdateRequest";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrBandIBCRequestNotFound"] = 25] = "ErrBandIBCRequestNotFound";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrEmptyBaseInfo"] = 26] = "ErrEmptyBaseInfo";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrEmptyProvider"] = 27] = "ErrEmptyProvider";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidProvider"] = 28] = "ErrInvalidProvider";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidSymbol"] = 29] = "ErrInvalidSymbol";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrRelayerAlreadyExists"] = 30] = "ErrRelayerAlreadyExists";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrProviderPriceNotFound"] = 31] = "ErrProviderPriceNotFound";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrInvalidOracleRequest"] = 32] = "ErrInvalidOracleRequest";
  ChainOracleErrorCodes2[ChainOracleErrorCodes2["ErrOraclePriceNotFound"] = 33] = "ErrOraclePriceNotFound";
})(ChainOracleErrorCodes || (ChainOracleErrorCodes = {}));
var ChainPeggyErrorCodes;
(function(ChainPeggyErrorCodes2) {
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrInternal"] = 1] = "ErrInternal";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrDuplicate"] = 2] = "ErrDuplicate";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrInvalid"] = 3] = "ErrInvalid";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrTimeout"] = 4] = "ErrTimeout";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrUnknown"] = 5] = "ErrUnknown";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrEmpty"] = 6] = "ErrEmpty";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrOutdated"] = 7] = "ErrOutdated";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrUnsupported"] = 8] = "ErrUnsupported";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrNonContiguousEventNonce"] = 9] = "ErrNonContiguousEventNonce";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrNoUnbatchedTxsFound"] = 10] = "ErrNoUnbatchedTxsFound";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrResetDelegateKeys"] = 11] = "ErrResetDelegateKeys";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrSupplyOverflow"] = 12] = "ErrSupplyOverflow";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrInvalidEthSender"] = 13] = "ErrInvalidEthSender";
  ChainPeggyErrorCodes2[ChainPeggyErrorCodes2["ErrInvalidEthDestination"] = 14] = "ErrInvalidEthDestination";
})(ChainPeggyErrorCodes || (ChainPeggyErrorCodes = {}));
var ChainTokenFactoryErrorCodes;
(function(ChainTokenFactoryErrorCodes2) {
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrDenomExists"] = 2] = "ErrDenomExists";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrUnauthorized"] = 3] = "ErrUnauthorized";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrInvalidDenom"] = 4] = "ErrInvalidDenom";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrInvalidCreator"] = 5] = "ErrInvalidCreator";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrInvalidAuthorityMetadata"] = 6] = "ErrInvalidAuthorityMetadata";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrInvalidGenesis"] = 7] = "ErrInvalidGenesis";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrSubdenomTooLong"] = 8] = "ErrSubdenomTooLong";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrSubdenomTooShort"] = 9] = "ErrSubdenomTooShort";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrSubdenomNestedTooShort"] = 10] = "ErrSubdenomNestedTooShort";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrCreatorTooLong"] = 11] = "ErrCreatorTooLong";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrDenomDoesNotExist"] = 12] = "ErrDenomDoesNotExist";
  ChainTokenFactoryErrorCodes2[ChainTokenFactoryErrorCodes2["ErrAmountNotPositive"] = 13] = "ErrAmountNotPositive";
})(ChainTokenFactoryErrorCodes || (ChainTokenFactoryErrorCodes = {}));
var ChainWasmXErrorCodes;
(function(ChainWasmXErrorCodes2) {
  ChainWasmXErrorCodes2[ChainWasmXErrorCodes2["ErrInvalidGasLimit"] = 1] = "ErrInvalidGasLimit";
  ChainWasmXErrorCodes2[ChainWasmXErrorCodes2["ErrInvalidGasPrice"] = 2] = "ErrInvalidGasPrice";
  ChainWasmXErrorCodes2[ChainWasmXErrorCodes2["ErrInvalidContractAddress"] = 3] = "ErrInvalidContractAddress";
  ChainWasmXErrorCodes2[ChainWasmXErrorCodes2["ErrAlreadyRegistered"] = 4] = "ErrAlreadyRegistered";
  ChainWasmXErrorCodes2[ChainWasmXErrorCodes2["ErrDuplicateContract"] = 5] = "ErrDuplicateContract";
  ChainWasmXErrorCodes2[ChainWasmXErrorCodes2["ErrNoContractAddresses"] = 6] = "ErrNoContractAddresses";
  ChainWasmXErrorCodes2[ChainWasmXErrorCodes2["ErrInvalidCodeId"] = 7] = "ErrInvalidCodeId";
})(ChainWasmXErrorCodes || (ChainWasmXErrorCodes = {}));
var ChainStakingErrorCodes;
(function(ChainStakingErrorCodes2) {
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrEmptyValidatorAddr"] = 2] = "ErrEmptyValidatorAddr";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNoValidatorFound"] = 3] = "ErrNoValidatorFound";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrValidatorOwnerExists"] = 4] = "ErrValidatorOwnerExists";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrValidatorPubKeyExists"] = 5] = "ErrValidatorPubKeyExists";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrValidatorPubKeyTypeNotSupported"] = 6] = "ErrValidatorPubKeyTypeNotSupported";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrValidatorJailed"] = 7] = "ErrValidatorJailed";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrBadRemoveValidator"] = 8] = "ErrBadRemoveValidator";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionNegative"] = 9] = "ErrCommissionNegative";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionHuge"] = 10] = "ErrCommissionHuge";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionGTMaxRate"] = 11] = "ErrCommissionGTMaxRate";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionUpdateTime"] = 12] = "ErrCommissionUpdateTime";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionChangeRateNegative"] = 13] = "ErrCommissionChangeRateNegative";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionChangeRateGTMaxRate"] = 14] = "ErrCommissionChangeRateGTMaxRate";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionGTMaxChangeRate"] = 15] = "ErrCommissionGTMaxChangeRate";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrSelfDelegationBelowMinimum"] = 16] = "ErrSelfDelegationBelowMinimum";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrMinSelfDelegationDecreased"] = 17] = "ErrMinSelfDelegationDecreased";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrEmptyDelegatorAddr"] = 18] = "ErrEmptyDelegatorAddr";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNoDelegation"] = 19] = "ErrNoDelegation";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrBadDelegatorAddr"] = 20] = "ErrBadDelegatorAddr";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNoDelegatorForAddress"] = 21] = "ErrNoDelegatorForAddress";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrInsufficientShares"] = 22] = "ErrInsufficientShares";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrDelegationValidatorEmpty"] = 23] = "ErrDelegationValidatorEmpty";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNotEnoughDelegationShares"] = 24] = "ErrNotEnoughDelegationShares";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNotMature"] = 25] = "ErrNotMature";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNoUnbondingDelegation"] = 26] = "ErrNoUnbondingDelegation";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrMaxUnbondingDelegationEntries"] = 27] = "ErrMaxUnbondingDelegationEntries";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNoRedelegation"] = 28] = "ErrNoRedelegation";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrSelfRedelegation"] = 29] = "ErrSelfRedelegation";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrTinyRedelegationAmount"] = 30] = "ErrTinyRedelegationAmount";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrBadRedelegationDst"] = 31] = "ErrBadRedelegationDst";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrTransitiveRedelegation"] = 32] = "ErrTransitiveRedelegation";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrMaxRedelegationEntries"] = 33] = "ErrMaxRedelegationEntries";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrDelegatorShareExRateInvalid"] = 34] = "ErrDelegatorShareExRateInvalid";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrBothShareMsgsGiven"] = 35] = "ErrBothShareMsgsGiven";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNeitherShareMsgsGiven"] = 36] = "ErrNeitherShareMsgsGiven";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrInvalidHistoricalInfo"] = 37] = "ErrInvalidHistoricalInfo";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrNoHistoricalInfo"] = 38] = "ErrNoHistoricalInfo";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrEmptyValidatorPubKey"] = 39] = "ErrEmptyValidatorPubKey";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrCommissionLTMinRate"] = 40] = "ErrCommissionLTMinRate";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrUnbondingNotFound"] = 41] = "ErrUnbondingNotFound";
  ChainStakingErrorCodes2[ChainStakingErrorCodes2["ErrUnbondingOnHoldRefCountNegative"] = 42] = "ErrUnbondingOnHoldRefCountNegative";
})(ChainStakingErrorCodes || (ChainStakingErrorCodes = {}));
var ChainGovErrorCodes;
(function(ChainGovErrorCodes2) {
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrUnknownProposal"] = 2] = "ErrUnknownProposal";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInactiveProposal"] = 3] = "ErrInactiveProposal";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrAlreadyActiveProposal"] = 4] = "ErrAlreadyActiveProposal";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidProposalContent"] = 5] = "ErrInvalidProposalContent";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidProposalType"] = 6] = "ErrInvalidProposalType";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidVote"] = 7] = "ErrInvalidVote";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidGenesis"] = 8] = "ErrInvalidGenesis";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrNoProposalHandlerExists"] = 9] = "ErrNoProposalHandlerExists";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrUnroutableProposalMsg"] = 10] = "ErrUnroutableProposalMsg";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrNoProposalMsgs"] = 11] = "ErrNoProposalMsgs";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidProposalMsg"] = 12] = "ErrInvalidProposalMsg";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidSigner"] = 13] = "ErrInvalidSigner";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidSignalMsg"] = 14] = "ErrInvalidSignalMsg";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrMetadataTooLong"] = 15] = "ErrMetadataTooLong";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrMinDepositTooSmall"] = 16] = "ErrMinDepositTooSmall";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrProposalNotFound"] = 17] = "ErrProposalNotFound";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidProposer"] = 18] = "ErrInvalidProposer";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrNoDeposits"] = 19] = "ErrNoDeposits";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrVotingPeriodEnded"] = 20] = "ErrVotingPeriodEnded";
  ChainGovErrorCodes2[ChainGovErrorCodes2["ErrInvalidProposal"] = 21] = "ErrInvalidProposal";
})(ChainGovErrorCodes || (ChainGovErrorCodes = {}));
var ChainDistributionErrorCodes;
(function(ChainDistributionErrorCodes2) {
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrEmptyDelegatorAddr"] = 2] = "ErrEmptyDelegatorAddr";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrEmptyWithdrawAddr"] = 3] = "ErrEmptyWithdrawAddr";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrEmptyValidatorAddr"] = 4] = "ErrEmptyValidatorAddr";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrEmptyDelegationDistInfo"] = 5] = "ErrEmptyDelegationDistInfo";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrNoValidatorDistInfo"] = 6] = "ErrNoValidatorDistInfo";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrNoValidatorCommission"] = 7] = "ErrNoValidatorCommission";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrSetWithdrawAddrDisabled"] = 8] = "ErrSetWithdrawAddrDisabled";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrBadDistribution"] = 9] = "ErrBadDistribution";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrInvalidProposalAmount"] = 10] = "ErrInvalidProposalAmount";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrEmptyProposalRecipient"] = 11] = "ErrEmptyProposalRecipient";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrNoValidatorExists"] = 12] = "ErrNoValidatorExists";
  ChainDistributionErrorCodes2[ChainDistributionErrorCodes2["ErrNoDelegationExists"] = 13] = "ErrNoDelegationExists";
})(ChainDistributionErrorCodes || (ChainDistributionErrorCodes = {}));
var ChainBankErrorCodes;
(function(ChainBankErrorCodes2) {
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrNoInputs"] = 2] = "ErrNoInputs";
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrNoOutputs"] = 3] = "ErrNoOutputs";
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrInputOutputMismatch"] = 4] = "ErrInputOutputMismatch";
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrSendDisabled"] = 5] = "ErrSendDisabled";
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrDenomMetadataNotFound"] = 6] = "ErrDenomMetadataNotFound";
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrInvalidKey"] = 7] = "ErrInvalidKey";
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrDuplicateEntry"] = 8] = "ErrDuplicateEntry";
  ChainBankErrorCodes2[ChainBankErrorCodes2["ErrMultipleSenders"] = 9] = "ErrMultipleSenders";
})(ChainBankErrorCodes || (ChainBankErrorCodes = {}));
var ChainWasmErrorCodes;
(function(ChainWasmErrorCodes2) {
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrCreateFailed"] = 2] = "ErrCreateFailed";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrAccountExists"] = 3] = "ErrAccountExists";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrInstantiateFailed"] = 4] = "ErrInstantiateFailed";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrExecuteFailed"] = 5] = "ErrExecuteFailed";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrGasLimit"] = 6] = "ErrGasLimit";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrInvalidGenesis"] = 7] = "ErrInvalidGenesis";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrNotFound"] = 8] = "ErrNotFound";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrQueryFailed"] = 9] = "ErrQueryFailed";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrInvalidMsg"] = 10] = "ErrInvalidMsg";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrMigrationFailed"] = 11] = "ErrMigrationFailed";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrEmpty"] = 12] = "ErrEmpty";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrLimit"] = 13] = "ErrLimit";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrInvalid"] = 14] = "ErrInvalid";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrDuplicate"] = 15] = "ErrDuplicate";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrMaxIBCChannels"] = 16] = "ErrMaxIBCChannels";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrUnsupportedForContract"] = 17] = "ErrUnsupportedForContract";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrPinContractFailed"] = 18] = "ErrPinContractFailed";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrUnpinContractFailed"] = 19] = "ErrUnpinContractFailed";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrUnknownMsg"] = 20] = "ErrUnknownMsg";
  ChainWasmErrorCodes2[ChainWasmErrorCodes2["ErrInvalidEvent"] = 21] = "ErrInvalidEvent";
})(ChainWasmErrorCodes || (ChainWasmErrorCodes = {}));

// ../../node_modules/@injectivelabs/exceptions/dist/esm/types/index.js
var HttpRequestMethod;
(function(HttpRequestMethod2) {
  HttpRequestMethod2["Get"] = "GET";
  HttpRequestMethod2["Post"] = "POST";
  HttpRequestMethod2["Options"] = "OPTIONS";
})(HttpRequestMethod || (HttpRequestMethod = {}));
var ErrorType;
(function(ErrorType2) {
  ErrorType2["Unspecified"] = "unspecified";
  ErrorType2["ChainError"] = "chain-error";
  ErrorType2["ExecutionError"] = "execution-error";
  ErrorType2["NotFoundError"] = "not-found-error";
  ErrorType2["ValidationError"] = "validation-error";
  ErrorType2["WalletError"] = "wallet-error";
  ErrorType2["WalletNotInstalledError"] = "wallet-not-installed-error";
  ErrorType2["GrpcUnaryRequest"] = "grpc-unary-request";
  ErrorType2["HttpRequest"] = "http-request";
  ErrorType2["Web3"] = "web3";
})(ErrorType || (ErrorType = {}));

// ../../node_modules/@injectivelabs/exceptions/dist/esm/messages.js
var auctionErrorMap = {
  [ChainAuctionErrorCodes.ErrBidInvalid]: "The gas limit provided in the transaction is not valid",
  [ChainAuctionErrorCodes.ErrBidRound]: "The gas limit provided in the transaction is not valid"
};
var authZErrorMap = {
  // ErrNoAuthorizationFound error if there is no authorization found given a grant key
  [ChainAuthZErrorCodes.ErrNoAuthorizationFound]: "Authorization not found",
  // ErrInvalidExpirationTime error if the set expiration time is in the past
  [ChainAuthZErrorCodes.ErrInvalidExpirationTime]: "Expiration time of authorization should be more than current time",
  // ErrUnknownAuthorizationType error for unknown authorization type
  [ChainAuthZErrorCodes.ErrUnknownAuthorizationType]: "Unknown authorization type",
  // ErrNoGrantKeyFound error if the requested grant key does not exist
  [ChainAuthZErrorCodes.ErrNoGrantKeyFound]: "Grant key not found",
  // ErrAuthorizationExpired error if the authorization has expired
  [ChainAuthZErrorCodes.ErrAuthorizationExpired]: "Authorization expired",
  // ErrGranteeIsGranter error if the grantee and the granter are the same
  [ChainAuthZErrorCodes.ErrGranteeIsGranter]: "Grantee and granter should be different",
  // ErrAuthorizationNumOfSigners error if an authorization message does not have only one signer
  [ChainAuthZErrorCodes.ErrAuthorizationNumOfSigners]: "Authorization can be given to msg with only one signer",
  // ErrNegativeMaxTokens error if the max tokens is negative
  [ChainAuthZErrorCodes.ErrNegativeMaxTokens]: "Max tokens should be positive"
};
var cosmosErrorMap = {
  [ChainCosmosErrorCode.ErrInsufficientFee]: "You do not have enough funds to cover the transaction fees.",
  [ChainCosmosErrorCode.ErrInsufficientFunds]: "You do not have enough funds.",
  [ChainCosmosErrorCode.ErrTxTimeoutHeight]: "The transaction failed to be included within a block on time.",
  [ChainCosmosErrorCode.ErrTxDecode]: "There is an issue while parsing the transaction",
  [ChainCosmosErrorCode.ErrInvalidSequence]: "The sequence number is not valid",
  [ChainCosmosErrorCode.ErrUnauthorized]: "Unauthorized",
  [ChainCosmosErrorCode.ErrUnknownRequest]: "The request is not known",
  [ChainCosmosErrorCode.ErrInvalidAddress]: "The address is not valid",
  [ChainCosmosErrorCode.ErrInvalidPubKey]: "The public key is not valid",
  [ChainCosmosErrorCode.ErrUnknownAddress]: "The address is unknown",
  [ChainCosmosErrorCode.ErrInvalidCoins]: "The coins are not valid",
  [ChainCosmosErrorCode.ErrOutOfGas]: "The transaction run out of gas",
  [ChainCosmosErrorCode.ErrMemoTooLarge]: "The memo field in the transaction is too large",
  [ChainCosmosErrorCode.ErrTooManySignatures]: "The transaction exceeded the maximum number of signatures",
  [ChainCosmosErrorCode.ErrNoSignatures]: "There are no signatures appended on the transaction",
  [ChainCosmosErrorCode.ErrJSONMarshal]: "There is an issue while parsing the transaction",
  [ChainCosmosErrorCode.ErrJSONUnmarshal]: "There is an issue while parsing the transaction",
  [ChainCosmosErrorCode.ErrInvalidRequest]: "invalid request",
  [ChainCosmosErrorCode.ErrTxInMempoolCache]: "The transaction is already in the mempool",
  [ChainCosmosErrorCode.ErrMempoolIsFull]: "The mempool is full",
  [ChainCosmosErrorCode.ErrTxTooLarge]: "The transaction is too large",
  [ChainCosmosErrorCode.ErrKeyNotFound]: "The key has not been found",
  [ChainCosmosErrorCode.ErrWrongPassword]: "invalid account password",
  [ChainCosmosErrorCode.ErrorInvalidSigner]: "tx intended signer does not match the given signer",
  [ChainCosmosErrorCode.ErrorInvalidGasAdjustment]: "invalid gas adjustment",
  [ChainCosmosErrorCode.ErrInvalidHeight]: "The height provided in the transaction is not valid",
  [ChainCosmosErrorCode.ErrInvalidVersion]: "The version provided in the transaction is not valid",
  [ChainCosmosErrorCode.ErrInvalidChainID]: "The chainId provided in the transaction is not valid",
  [ChainCosmosErrorCode.ErrInvalidType]: "The type provided in the transaction is not valid",
  [ChainCosmosErrorCode.ErrUnknownExtensionOptions]: "The extension options provided in the transaction is unknown",
  [ChainCosmosErrorCode.ErrWrongSequence]: "The sequence number provided in the transaction is incorrect",
  [ChainCosmosErrorCode.ErrPackAny]: "failed packing protobuf message to Any",
  [ChainCosmosErrorCode.ErrUnpackAny]: "failed unpacking protobuf message from Any",
  [ChainCosmosErrorCode.ErrLogic]: "Internal logic error",
  [ChainCosmosErrorCode.ErrConflict]: "conflict",
  [ChainCosmosErrorCode.ErrNotSupported]: "The feature is not supported",
  [ChainCosmosErrorCode.ErrNotFound]: "not found",
  [ChainCosmosErrorCode.ErrIO]: "Internal IO error",
  [ChainCosmosErrorCode.ErrAppConfig]: "error in app.toml",
  [ChainCosmosErrorCode.ErrInvalidGasLimit]: "The gas limit provided in the transaction is not valid"
};
var exchangeErrorMap = {
  [ChainExchangeModuleErrorCode.ErrOrderInvalid]: "Your order failed to validate",
  [ChainExchangeModuleErrorCode.ErrSpotMarketNotFound]: "The spot market has not been found",
  [ChainExchangeModuleErrorCode.ErrSpotMarketExists]: "The spot market already exists",
  [ChainExchangeModuleErrorCode.ErrBadField]: "There is an issue with your order",
  [ChainExchangeModuleErrorCode.ErrMarketInvalid]: "The market failed to validate",
  [ChainExchangeModuleErrorCode.ErrInsufficientDeposit]: "Your trading account has insufficient funds",
  [ChainExchangeModuleErrorCode.ErrUnrecognizedOrderType]: "The order type is not recognized",
  [ChainExchangeModuleErrorCode.ErrInsufficientPositionQuantity]: "The position quantity is insufficient for the order",
  [ChainExchangeModuleErrorCode.ErrOrderHashInvalid]: "The order hash is not valid",
  [ChainExchangeModuleErrorCode.ErrBadSubaccountID]: "The subaccount id is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidBaseDenom]: "",
  [ChainExchangeModuleErrorCode.ErrInvalidExpiry]: "The expiry date is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidPrice]: "The price is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidQuantity]: "The quantity is not valid",
  [ChainExchangeModuleErrorCode.ErrUnsupportedOracleType]: "The oracle type is not supported",
  [ChainExchangeModuleErrorCode.ErrOrderDoesntExist]: "The order does not exist",
  [ChainExchangeModuleErrorCode.ErrOrderbookFillInvalid]: "",
  [ChainExchangeModuleErrorCode.ErrPerpetualMarketExists]: "The perpetual market already exists",
  [ChainExchangeModuleErrorCode.ErrExpiryFuturesMarketExists]: "The expiry futures market market already exists",
  [ChainExchangeModuleErrorCode.ErrExpiryFuturesMarketExpired]: "The expiry futures market has expired",
  [ChainExchangeModuleErrorCode.ErrNoLiquidity]: "There is not enough liquidity",
  [ChainExchangeModuleErrorCode.ErrSlippageExceedsWorstPrice]: "There is not enough liquidity",
  [ChainExchangeModuleErrorCode.ErrInsufficientOrderMargin]: "The order has insufficient margin",
  [ChainExchangeModuleErrorCode.ErrDerivativeMarketNotFound]: "The derivative market cannot be found",
  [ChainExchangeModuleErrorCode.ErrPositionNotFound]: "The position cannot be found",
  [ChainExchangeModuleErrorCode.ErrInvalidReduceOnlyPositionDirection]: "Position direction does not oppose the reduce-only order",
  [ChainExchangeModuleErrorCode.ErrPriceSurpassesBankruptcyPrice]: "Your order price surpasses bankruptcy price",
  [ChainExchangeModuleErrorCode.ErrPositionNotLiquidable]: "The position is not liquidable",
  [ChainExchangeModuleErrorCode.ErrInvalidTriggerPrice]: "Your order trigger price is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidOracleType]: "The oracle type is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidPriceTickSize]: "The minimum price tick size is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidQuantityTickSize]: "The minimum quantity tick size is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidMargin]: "Your order's minimum margin is not valid ",
  [ChainExchangeModuleErrorCode.ErrExceedsOrderSideCount]: "You cannot have more orders for this market for this direction",
  [ChainExchangeModuleErrorCode.ErrMarketOrderAlreadyExists]: "You cannot place another market order within this block",
  [ChainExchangeModuleErrorCode.ErrConditionalMarketOrderAlreadyExists]: "You cannot place another conditional market order",
  [ChainExchangeModuleErrorCode.ErrMarketLaunchProposalAlreadyExists]: "There is an existing equivalent market launch proposal.",
  [ChainExchangeModuleErrorCode.ErrInvalidMarketStatus]: "The market status is not valid",
  [ChainExchangeModuleErrorCode.ErrSameDenoms]: "The base denom and quote denom cannot be same",
  [ChainExchangeModuleErrorCode.ErrSameOracles]: "The oracle base and the oracle quote cannot be the same",
  [ChainExchangeModuleErrorCode.ErrFeeRatesRelation]: "The MakerFeeRate does not match TakerFeeRate requirements",
  [ChainExchangeModuleErrorCode.ErrMarginsRelation]: "The MaintenanceMarginRatio cannot be greater than InitialMarginRatio",
  [ChainExchangeModuleErrorCode.ErrExceedsMaxOracleScaleFactor]: "The OracleScaleFactor cannot be greater than MaxOracleScaleFactor",
  [ChainExchangeModuleErrorCode.ErrSpotExchangeNotEnabled]: "Spot exchange is not enabled yet",
  [ChainExchangeModuleErrorCode.ErrDerivativesExchangeNotEnabled]: "Derivatives exchange is not enabled yet",
  [ChainExchangeModuleErrorCode.ErrOraclePriceDeltaExceedsThreshold]: "The oracle price delta exceeds threshold",
  [ChainExchangeModuleErrorCode.ErrInvalidHourlyInterestRate]: "The hourly interest rate is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidHourlyFundingRateCap]: "The hourly funding rate cap is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidMarketFundingParamUpdate]: "You can only update funding parameters on perpetual markets.",
  [ChainExchangeModuleErrorCode.ErrInvalidTradingRewardCampaign]: "The trading reward campaign is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidFeeDiscountSchedule]: "The fee discount schedule is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidLiquidationOrder]: "The liquidation order is not valid",
  [ChainExchangeModuleErrorCode.ErrTradingRewardCampaignDistributionError]: "Unknown error happened for campaign distributions",
  [ChainExchangeModuleErrorCode.ErrInvalidTradingRewardsPendingPointsUpdate]: "The updated trading reward points is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidBatchMsgUpdate]: "The MsgBatchUpdate is not valid",
  [ChainExchangeModuleErrorCode.ErrExceedsTopOfBookPrice]: "The post-only order price exceeds top of the orderbook price",
  [ChainExchangeModuleErrorCode.ErrInvalidOrderTypeForMessage]: "The order type is not supported for this message",
  [ChainExchangeModuleErrorCode.ErrInvalidDMMSender]: "The sender must match the DMM address",
  [ChainExchangeModuleErrorCode.ErrAlreadyOptedOutOfRewards]: "The DMM address already opted out of rewards",
  [ChainExchangeModuleErrorCode.ErrInvalidMarginRatio]: "The margin ratio is not valid",
  [ChainExchangeModuleErrorCode.ErrBelowMinimalContribution]: "The provided funds are below minimum",
  [ChainExchangeModuleErrorCode.ErrLowPositionMargin]: "The position is below initial margin requirement",
  [ChainExchangeModuleErrorCode.ErrInvalidTotalSupply]: "The pool has non-positive total LP token supply",
  [ChainExchangeModuleErrorCode.ErrInvalidLpTokenBurnAmount]: "The passed LP token burn amount is greater than total LP token supply",
  [ChainExchangeModuleErrorCode.ErrUnsupportedAction]: "This action is not supported",
  [ChainExchangeModuleErrorCode.ErrNegativePositionQuantity]: "The position quantity cannot be negative",
  [ChainExchangeModuleErrorCode.ErrBinaryOptionsMarketExists]: "The BinaryOptions market already exists",
  [ChainExchangeModuleErrorCode.ErrBinaryOptionsMarketNotFound]: "The BinaryOptions market cannot be found",
  [ChainExchangeModuleErrorCode.ErrInvalidSettlement]: "The settlement price is not valid",
  [ChainExchangeModuleErrorCode.ErrAccountDoesntExist]: "The trading account does not exist",
  [ChainExchangeModuleErrorCode.ErrSenderIsNotAnAdmin]: "The sender should be the admin of the market",
  [ChainExchangeModuleErrorCode.ErrMarketAlreadyScheduledToSettle]: "The market is already scheduled to settle ",
  [ChainExchangeModuleErrorCode.ErrGenericMarketNotFound]: "The market cannot be found",
  [ChainExchangeModuleErrorCode.ErrInvalidDenomDecimal]: "The denom decimal cannot be below 1 or above max scale factor",
  [ChainExchangeModuleErrorCode.ErrInvalidState]: "The state is not valid",
  [ChainExchangeModuleErrorCode.ErrTransientOrdersUpToCancelNotSupported]: "The transient orders up to cancellation not supported",
  [ChainExchangeModuleErrorCode.ErrInvalidTrade]: "The trade is not valid",
  [ChainExchangeModuleErrorCode.ErrNoMarginLocked]: "There is no margin locked in the trading account",
  [ChainExchangeModuleErrorCode.ErrInvalidAccessLevel]: "There is no access to perform action",
  [ChainExchangeModuleErrorCode.ErrInvalidAddress]: "The address is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidArgument]: "The argument is not valid",
  [ChainExchangeModuleErrorCode.ErrInvalidFundsDirection]: "Invalid funds direction",
  [ChainExchangeModuleErrorCode.ErrNoFundsProvided]: "No funds provided",
  [ChainExchangeModuleErrorCode.ErrInvalidSignature]: "Invalid signature",
  [ChainExchangeModuleErrorCode.ErrNoFundsToUnlock]: "No funds to unlock",
  [ChainExchangeModuleErrorCode.ErrNoMsgsProvided]: "No msgs provided",
  [ChainExchangeModuleErrorCode.ErrNoMsgProvided]: "No msg provided",
  [ChainExchangeModuleErrorCode.ErrInvalidAmount]: "Invalid amount",
  [ChainExchangeModuleErrorCode.ErrFeatureDisabled]: "The current feature has been disabled",
  [ChainExchangeModuleErrorCode.ErrTooMuchOrderMargin]: "Order has too much margin"
};
var insuranceErrorMap = {
  [ChainInsuranceErrorCodes.ErrInsuranceFundAlreadyExists]: "The insurance fund already exists",
  [ChainInsuranceErrorCodes.ErrInsuranceFundNotFound]: "The insurance fund is not found",
  [ChainInsuranceErrorCodes.ErrRedemptionAlreadyExists]: "The redemption already exists",
  [ChainInsuranceErrorCodes.ErrInvalidDepositAmount]: "The deposit amount is not valid",
  [ChainInsuranceErrorCodes.ErrInvalidDepositDenom]: "The deposit denom is not valid",
  [ChainInsuranceErrorCodes.ErrPayoutTooLarge]: "The insurance fund payout exceeds the deposits",
  [ChainInsuranceErrorCodes.ErrInvalidTicker]: "The ticker is not valid",
  [ChainInsuranceErrorCodes.ErrInvalidQuoteDenom]: "The quote denom is not valid",
  [ChainInsuranceErrorCodes.ErrInvalidOracle]: "The oracle is not valid",
  [ChainInsuranceErrorCodes.ErrInvalidExpirationTime]: "The expiration time is not valid",
  [ChainInsuranceErrorCodes.ErrInvalidMarketID]: "The marketId is not valid",
  [ChainInsuranceErrorCodes.ErrInvalidShareDenom]: "The share denom is not valid"
};
var ocrErrorMap = {
  [ChainOcrErrorCodes.ErrStaleReport]: "stale report",
  [ChainOcrErrorCodes.ErrIncompleteProposal]: "incomplete proposal",
  [ChainOcrErrorCodes.ErrRepeatedAddress]: "repeated oracle address",
  [ChainOcrErrorCodes.ErrTooManySigners]: "too many signers",
  [ChainOcrErrorCodes.ErrIncorrectConfig]: "incorrect config",
  [ChainOcrErrorCodes.ErrConfigDigestNotMatch]: "config digest doesn't match",
  [ChainOcrErrorCodes.ErrWrongNumberOfSignatures]: "wrong number of signatures",
  [ChainOcrErrorCodes.ErrIncorrectSignature]: "incorrect signature",
  [ChainOcrErrorCodes.ErrNoTransmitter]: "no transmitter specified",
  [ChainOcrErrorCodes.ErrIncorrectTransmissionData]: "incorrect transmission data",
  [ChainOcrErrorCodes.ErrNoTransmissionsFound]: "no transmissions found",
  [ChainOcrErrorCodes.ErrMedianValueOutOfBounds]: "median value is out of bounds",
  [ChainOcrErrorCodes.ErrIncorrectRewardPoolDenom]: "LINK denom doesn't match",
  [ChainOcrErrorCodes.ErrNoRewardPool]: "Reward Pool doesn't exist",
  [ChainOcrErrorCodes.ErrInvalidPayees]: "wrong number of payees and transmitters",
  [ChainOcrErrorCodes.ErrModuleAdminRestricted]: "action is restricted to the module admin",
  [ChainOcrErrorCodes.ErrFeedAlreadyExists]: "feed already exists",
  [ChainOcrErrorCodes.ErrFeedDoesntExists]: "feed doesnt exists",
  [ChainOcrErrorCodes.ErrAdminRestricted]: "action is admin-restricted",
  [ChainOcrErrorCodes.ErrInsufficientRewardPool]: "insufficient reward pool",
  [ChainOcrErrorCodes.ErrPayeeAlreadySet]: "payee already set",
  [ChainOcrErrorCodes.ErrPayeeRestricted]: "action is payee-restricted",
  [ChainOcrErrorCodes.ErrFeedConfigNotFound]: "feed config not found"
};
var oracleErrorMap = {
  [ChainOracleErrorCodes.ErrEmptyRelayerAddr]: "relayer address is empty",
  [ChainOracleErrorCodes.ErrBadRatesCount]: "bad rates count",
  [ChainOracleErrorCodes.ErrBadResolveTimesCount]: "bad resolve times",
  [ChainOracleErrorCodes.ErrBadRequestIDsCount]: "bad request ID",
  [ChainOracleErrorCodes.ErrRelayerNotAuthorized]: "relayer not authorized",
  [ChainOracleErrorCodes.ErrBadPriceFeedBaseCount]: "bad price feed base count",
  [ChainOracleErrorCodes.ErrBadPriceFeedQuoteCount]: "bad price feed quote count",
  [ChainOracleErrorCodes.ErrUnsupportedOracleType]: "unsupported oracle type",
  [ChainOracleErrorCodes.ErrBadMessagesCount]: "bad messages count",
  [ChainOracleErrorCodes.ErrBadCoinbaseMessage]: "bad Coinbase message",
  [ChainOracleErrorCodes.ErrInvalidEthereumSignature]: "bad Ethereum signature",
  [ChainOracleErrorCodes.ErrBadCoinbaseMessageTimestamp]: "bad Coinbase message timestamp",
  [ChainOracleErrorCodes.ErrCoinbasePriceNotFound]: "Coinbase price not found",
  [ChainOracleErrorCodes.ErrBadPrice]: "Prices must be positive",
  [ChainOracleErrorCodes.ErrPriceTooLarge]: "Prices must be less than 10 million.",
  [ChainOracleErrorCodes.ErrInvalidBandIBCRequest]: "Invalid Band IBC Request",
  [ChainOracleErrorCodes.ErrSample]: "sample error",
  [ChainOracleErrorCodes.ErrInvalidPacketTimeout]: "invalid packet timeout",
  [ChainOracleErrorCodes.ErrBadSymbolsCount]: "invalid symbols count",
  [ChainOracleErrorCodes.ErrBadIBCPortBind]: "could not claim port capability",
  [ChainOracleErrorCodes.ErrInvalidPortID]: "invalid IBC Port ID",
  [ChainOracleErrorCodes.ErrInvalidChannelID]: "invalid IBC Channel ID",
  [ChainOracleErrorCodes.ErrBadRequestInterval]: "invalid Band IBC request interval",
  [ChainOracleErrorCodes.ErrInvalidBandIBCUpdateRequest]: "Invalid Band IBC Update Request Proposal",
  [ChainOracleErrorCodes.ErrBandIBCRequestNotFound]: "Band IBC Oracle Request not found",
  [ChainOracleErrorCodes.ErrEmptyBaseInfo]: "Base Info is empty",
  [ChainOracleErrorCodes.ErrEmptyProvider]: "provider is empty",
  [ChainOracleErrorCodes.ErrInvalidProvider]: "invalid provider name",
  [ChainOracleErrorCodes.ErrInvalidSymbol]: "invalid symbol",
  [ChainOracleErrorCodes.ErrRelayerAlreadyExists]: "relayer already exists",
  [ChainOracleErrorCodes.ErrProviderPriceNotFound]: "provider price not found",
  [ChainOracleErrorCodes.ErrInvalidOracleRequest]: "invalid oracle request",
  [ChainOracleErrorCodes.ErrOraclePriceNotFound]: "no price for oracle was found"
};
var peggyErrorMap = {
  [ChainPeggyErrorCodes.ErrInternal]: "internal",
  [ChainPeggyErrorCodes.ErrDuplicate]: "duplicate",
  [ChainPeggyErrorCodes.ErrInvalid]: "invalid",
  [ChainPeggyErrorCodes.ErrTimeout]: "timeout",
  [ChainPeggyErrorCodes.ErrUnknown]: "unknown",
  [ChainPeggyErrorCodes.ErrEmpty]: "empty",
  [ChainPeggyErrorCodes.ErrOutdated]: "outdated",
  [ChainPeggyErrorCodes.ErrUnsupported]: "unsupported",
  [ChainPeggyErrorCodes.ErrNonContiguousEventNonce]: "non contiguous event nonce",
  [ChainPeggyErrorCodes.ErrNoUnbatchedTxsFound]: "no unbatched txs found",
  [ChainPeggyErrorCodes.ErrResetDelegateKeys]: "can not set orchestrator addresses more than once",
  [ChainPeggyErrorCodes.ErrSupplyOverflow]: "supply cannot exceed max ERC20 value",
  [ChainPeggyErrorCodes.ErrInvalidEthSender]: "invalid ethereum sender on claim",
  [ChainPeggyErrorCodes.ErrInvalidEthDestination]: "invalid ethereum destination"
};
var tokenFactoryErrorMap = {
  [ChainTokenFactoryErrorCodes.ErrDenomExists]: "attempting to create a denom that already exists",
  [ChainTokenFactoryErrorCodes.ErrUnauthorized]: "unauthorized account",
  [ChainTokenFactoryErrorCodes.ErrInvalidDenom]: "invalid denom",
  [ChainTokenFactoryErrorCodes.ErrInvalidCreator]: "invalid creator",
  [ChainTokenFactoryErrorCodes.ErrInvalidAuthorityMetadata]: "invalid authority metadata",
  [ChainTokenFactoryErrorCodes.ErrInvalidGenesis]: "invalid genesis",
  [ChainTokenFactoryErrorCodes.ErrSubdenomTooLong]: "subdenom too long",
  [ChainTokenFactoryErrorCodes.ErrSubdenomTooShort]: "subdenom too short",
  [ChainTokenFactoryErrorCodes.ErrSubdenomNestedTooShort]: "nested subdenom too short, each one should have at least",
  [ChainTokenFactoryErrorCodes.ErrCreatorTooLong]: "creator too long",
  [ChainTokenFactoryErrorCodes.ErrDenomDoesNotExist]: "denom does not exist"
};
var wasmxErrorMap = {
  [ChainWasmXErrorCodes.ErrInvalidGasLimit]: "invalid gas limit",
  [ChainWasmXErrorCodes.ErrInvalidGasPrice]: "invalid gas price",
  [ChainWasmXErrorCodes.ErrInvalidContractAddress]: "invalid contract address",
  [ChainWasmXErrorCodes.ErrAlreadyRegistered]: "contract already registered",
  [ChainWasmXErrorCodes.ErrDuplicateContract]: "duplicate contract",
  [ChainWasmXErrorCodes.ErrNoContractAddresses]: "no contract addresses found",
  [ChainWasmXErrorCodes.ErrInvalidCodeId]: "invalid code id"
};
var stakingErrorMap = {
  [ChainStakingErrorCodes.ErrEmptyValidatorAddr]: "empty validator address",
  [ChainStakingErrorCodes.ErrNoValidatorFound]: "validator does not exist",
  [ChainStakingErrorCodes.ErrValidatorOwnerExists]: "validator already exist for this operator address; must use new validator operator address",
  [ChainStakingErrorCodes.ErrValidatorPubKeyExists]: "validator already exist for this pubkey; must use new validator pubkey",
  [ChainStakingErrorCodes.ErrValidatorPubKeyTypeNotSupported]: "validator pubkey type is not supported",
  [ChainStakingErrorCodes.ErrValidatorJailed]: "validator for this address is currently jailed",
  [ChainStakingErrorCodes.ErrBadRemoveValidator]: "failed to remove validator",
  [ChainStakingErrorCodes.ErrCommissionNegative]: "commission must be positive",
  [ChainStakingErrorCodes.ErrCommissionHuge]: "commission cannot be more than 100%",
  [ChainStakingErrorCodes.ErrCommissionGTMaxRate]: "commission cannot be more than the max rate",
  [ChainStakingErrorCodes.ErrCommissionUpdateTime]: "commission cannot be changed more than once in 24h",
  [ChainStakingErrorCodes.ErrCommissionChangeRateNegative]: "commission change rate must be positive",
  [ChainStakingErrorCodes.ErrCommissionChangeRateGTMaxRate]: "commission change rate cannot be more than the max rate",
  [ChainStakingErrorCodes.ErrCommissionGTMaxChangeRate]: "commission cannot be changed more than max change rate",
  [ChainStakingErrorCodes.ErrSelfDelegationBelowMinimum]: "validator's self delegation must be greater than their minimum self delegation",
  [ChainStakingErrorCodes.ErrMinSelfDelegationDecreased]: "minimum self delegation cannot be decrease",
  [ChainStakingErrorCodes.ErrEmptyDelegatorAddr]: "empty delegator address",
  [ChainStakingErrorCodes.ErrNoDelegation]: "no delegation for (address, validator) tuple",
  [ChainStakingErrorCodes.ErrBadDelegatorAddr]: "delegator does not exist with address",
  [ChainStakingErrorCodes.ErrNoDelegatorForAddress]: "delegator does not contain delegation",
  [ChainStakingErrorCodes.ErrInsufficientShares]: "insufficient delegation shares",
  [ChainStakingErrorCodes.ErrDelegationValidatorEmpty]: "cannot delegate to an empty validator",
  [ChainStakingErrorCodes.ErrNotEnoughDelegationShares]: "not enough delegation shares",
  [ChainStakingErrorCodes.ErrNotMature]: "entry not mature",
  [ChainStakingErrorCodes.ErrNoUnbondingDelegation]: "no unbonding delegation found",
  [ChainStakingErrorCodes.ErrMaxUnbondingDelegationEntries]: "too many unbonding delegation entries for (delegator, validator) tuple",
  [ChainStakingErrorCodes.ErrNoRedelegation]: "no redelegation found",
  [ChainStakingErrorCodes.ErrSelfRedelegation]: "cannot redelegate to the same validator",
  [ChainStakingErrorCodes.ErrTinyRedelegationAmount]: "too few tokens to redelegate (truncates to zero tokens)",
  [ChainStakingErrorCodes.ErrBadRedelegationDst]: "redelegation destination validator not found",
  [ChainStakingErrorCodes.ErrTransitiveRedelegation]: "redelegation to this validator already in progress; first redelegation to this validator must complete before next redelegation",
  [ChainStakingErrorCodes.ErrMaxRedelegationEntries]: "too many redelegation entries for (delegator, src-validator, dst-validator) tuple",
  [ChainStakingErrorCodes.ErrDelegatorShareExRateInvalid]: "cannot delegate to validators with invalid (zero) ex-rate",
  [ChainStakingErrorCodes.ErrBothShareMsgsGiven]: "both shares amount and shares percent provided",
  [ChainStakingErrorCodes.ErrNeitherShareMsgsGiven]: "neither shares amount nor shares percent provided",
  [ChainStakingErrorCodes.ErrInvalidHistoricalInfo]: "invalid historical info",
  [ChainStakingErrorCodes.ErrNoHistoricalInfo]: "no historical info found",
  [ChainStakingErrorCodes.ErrEmptyValidatorPubKey]: "empty validator public key",
  [ChainStakingErrorCodes.ErrCommissionLTMinRate]: "commission cannot be less than min rate",
  [ChainStakingErrorCodes.ErrUnbondingNotFound]: "unbonding operation not found",
  [ChainStakingErrorCodes.ErrUnbondingOnHoldRefCountNegative]: "cannot un-hold unbonding operation that is not on hold"
};
var govErrorMap = {
  [ChainGovErrorCodes.ErrUnknownProposal]: "unknown proposal",
  [ChainGovErrorCodes.ErrInactiveProposal]: "inactive proposal",
  [ChainGovErrorCodes.ErrAlreadyActiveProposal]: "proposal already active",
  [ChainGovErrorCodes.ErrInvalidProposalContent]: "invalid proposal content",
  [ChainGovErrorCodes.ErrInvalidProposalType]: "invalid proposal type",
  [ChainGovErrorCodes.ErrInvalidVote]: "invalid vote option",
  [ChainGovErrorCodes.ErrInvalidGenesis]: "invalid genesis state",
  [ChainGovErrorCodes.ErrNoProposalHandlerExists]: "no handler exists for proposal type",
  [ChainGovErrorCodes.ErrUnroutableProposalMsg]: "proposal message not recogized by router",
  [ChainGovErrorCodes.ErrNoProposalMsgs]: "no messages proposed",
  [ChainGovErrorCodes.ErrInvalidProposalMsg]: "invalid proposal message",
  [ChainGovErrorCodes.ErrInvalidSigner]: "expected gov account as only signer for proposal message",
  [ChainGovErrorCodes.ErrInvalidSignalMsg]: "signal message is invalid",
  [ChainGovErrorCodes.ErrMetadataTooLong]: "metadata too long",
  [ChainGovErrorCodes.ErrMinDepositTooSmall]: "minimum deposit is too small",
  [ChainGovErrorCodes.ErrProposalNotFound]: "proposal is not found",
  [ChainGovErrorCodes.ErrInvalidProposer]: "invalid proposer",
  [ChainGovErrorCodes.ErrNoDeposits]: "no deposits found",
  [ChainGovErrorCodes.ErrVotingPeriodEnded]: "voting period already ended",
  [ChainGovErrorCodes.ErrInvalidProposal]: "invalid proposal"
};
var bankErrorMap = {
  [ChainBankErrorCodes.ErrNoInputs]: "no inputs to send transaction",
  [ChainBankErrorCodes.ErrNoOutputs]: "no outputs to send transaction",
  [ChainBankErrorCodes.ErrInputOutputMismatch]: "sum inputs != sum outputs",
  [ChainBankErrorCodes.ErrSendDisabled]: "send transactions are disabled",
  [ChainBankErrorCodes.ErrDenomMetadataNotFound]: "client denom metadata not found",
  [ChainBankErrorCodes.ErrInvalidKey]: "invalid key",
  [ChainBankErrorCodes.ErrDuplicateEntry]: "duplicate entry",
  [ChainBankErrorCodes.ErrMultipleSenders]: "multiple senders not allowed"
};
var distributionErrorMap = {
  [ChainDistributionErrorCodes.ErrEmptyDelegatorAddr]: "delegator address is empty",
  [ChainDistributionErrorCodes.ErrEmptyWithdrawAddr]: "withdraw address is empty",
  [ChainDistributionErrorCodes.ErrEmptyValidatorAddr]: "validator address is empty",
  [ChainDistributionErrorCodes.ErrEmptyDelegationDistInfo]: "no delegation distribution info",
  [ChainDistributionErrorCodes.ErrNoValidatorDistInfo]: "no validator distribution info",
  [ChainDistributionErrorCodes.ErrNoValidatorCommission]: "no validator commission to withdraw",
  [ChainDistributionErrorCodes.ErrSetWithdrawAddrDisabled]: "set withdraw address disabled",
  [ChainDistributionErrorCodes.ErrBadDistribution]: "community pool does not have sufficient coins to distribute",
  [ChainDistributionErrorCodes.ErrInvalidProposalAmount]: "invalid community pool spend proposal amount",
  [ChainDistributionErrorCodes.ErrEmptyProposalRecipient]: "invalid community pool spend proposal recipient",
  [ChainDistributionErrorCodes.ErrNoValidatorExists]: "validator does not exist",
  [ChainDistributionErrorCodes.ErrNoDelegationExists]: "delegation does not exist"
};
var wasmErrorMap = {
  [ChainWasmErrorCodes.ErrCreateFailed]: "create wasm contract failed",
  [ChainWasmErrorCodes.ErrAccountExists]: "contract account already exists",
  [ChainWasmErrorCodes.ErrInstantiateFailed]: "instantiate wasm contract failed",
  [ChainWasmErrorCodes.ErrExecuteFailed]: "execute wasm contract failed",
  [ChainWasmErrorCodes.ErrGasLimit]: "insufficient gas",
  [ChainWasmErrorCodes.ErrInvalidGenesis]: "invalid genesis",
  [ChainWasmErrorCodes.ErrNotFound]: "not found",
  [ChainWasmErrorCodes.ErrQueryFailed]: "query wasm contract failed",
  [ChainWasmErrorCodes.ErrInvalidMsg]: "invalid CosmosMsg from the contract",
  [ChainWasmErrorCodes.ErrMigrationFailed]: "migrate wasm contract failed",
  [ChainWasmErrorCodes.ErrEmpty]: "empty",
  [ChainWasmErrorCodes.ErrLimit]: "exceeds limit",
  [ChainWasmErrorCodes.ErrInvalid]: "invalid",
  [ChainWasmErrorCodes.ErrDuplicate]: "duplicate",
  [ChainWasmErrorCodes.ErrMaxIBCChannels]: "max transfer channels",
  [ChainWasmErrorCodes.ErrUnsupportedForContract]: "unsupported for this contract",
  [ChainWasmErrorCodes.ErrPinContractFailed]: "pinning contract failed",
  [ChainWasmErrorCodes.ErrUnpinContractFailed]: "unpinning contract failed",
  [ChainWasmErrorCodes.ErrUnknownMsg]: "unknown message from the contract",
  [ChainWasmErrorCodes.ErrInvalidEvent]: "invalid event"
};
var chainModuleCodeErrorMessagesMap = {
  [TransactionChainErrorModule.AuthZ]: authZErrorMap,
  [TransactionChainErrorModule.Auction]: auctionErrorMap,
  [TransactionChainErrorModule.CosmosSdk]: cosmosErrorMap,
  [TransactionChainErrorModule.Exchange]: exchangeErrorMap,
  [TransactionChainErrorModule.Insurance]: insuranceErrorMap,
  [TransactionChainErrorModule.Ocr]: ocrErrorMap,
  [TransactionChainErrorModule.Oracle]: oracleErrorMap,
  [TransactionChainErrorModule.Peggy]: peggyErrorMap,
  [TransactionChainErrorModule.TokenFactory]: tokenFactoryErrorMap,
  [TransactionChainErrorModule.Wasmx]: wasmxErrorMap,
  [TransactionChainErrorModule.Wasm]: wasmErrorMap,
  [TransactionChainErrorModule.Staking]: stakingErrorMap,
  [TransactionChainErrorModule.Bank]: bankErrorMap,
  [TransactionChainErrorModule.Gov]: govErrorMap,
  [TransactionChainErrorModule.Distribution]: distributionErrorMap
};
var chainErrorMessagesMap = {
  "insufficient fee": {
    message: "You do not have enough funds to cover the transaction fees.",
    code: ChainCosmosErrorCode.ErrInsufficientFee,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "insufficient funds": {
    message: "You do not have enough funds.",
    code: ChainCosmosErrorCode.ErrInsufficientFunds,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "tx timeout height": {
    message: "The transaction failed to be included within a block on time.",
    code: ChainCosmosErrorCode.ErrTxTimeoutHeight,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "tx parse error": {
    message: "There is an issue while parsing the transaction",
    code: ChainCosmosErrorCode.ErrTxDecode,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid sequence": {
    message: "The sequence number is not valid",
    code: ChainCosmosErrorCode.ErrInvalidSequence,
    module: TransactionChainErrorModule.CosmosSdk
  },
  unauthorized: {
    message: "Unauthorized",
    code: ChainCosmosErrorCode.ErrUnauthorized,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid address": {
    message: "The address is not valid",
    code: ChainCosmosErrorCode.ErrInvalidAddress,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "cosmos account not exists": {
    message: "You need to create your address on Injective by transferring funds",
    code: ChainCosmosErrorCode.ErrInsufficientFee,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid pubkey": {
    message: "The public key is not valid",
    code: ChainCosmosErrorCode.ErrInvalidPubKey,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "unknown address": {
    message: "The address is unknown",
    code: ChainCosmosErrorCode.ErrUnknownAddress,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid coins": {
    message: "The coins are not valid",
    code: ChainCosmosErrorCode.ErrInvalidCoins,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "out of gas": {
    message: "The transaction run out of gas",
    code: ChainCosmosErrorCode.ErrOutOfGas,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "memo too large": {
    message: "The memo field in the transaction is too large",
    code: ChainCosmosErrorCode.ErrMemoTooLarge,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "maximum number of signatures exceeded": {
    message: "The transaction exceeded the maximum number of signatures",
    code: ChainCosmosErrorCode.ErrTooManySignatures,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "no signatures supplied": {
    message: "There are no signatures appended on the transaction",
    code: ChainCosmosErrorCode.ErrNoSignatures,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "failed to marshal JSON bytes": {
    message: "There is an issue while parsing the transaction",
    code: ChainCosmosErrorCode.ErrJSONMarshal,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "failed to unmarshal JSON bytes": {
    message: "There is an issue while parsing the transaction",
    code: ChainCosmosErrorCode.ErrJSONUnmarshal,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid request": {
    message: "invalid request",
    code: ChainCosmosErrorCode.ErrInvalidRequest,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "tx already in mempool": {
    message: "The transaction is already in the mempool",
    code: ChainCosmosErrorCode.ErrTxInMempoolCache,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "mempool is full": {
    message: "The mempool is full",
    code: ChainCosmosErrorCode.ErrMempoolIsFull,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "tx too large": {
    message: "The transaction is too large",
    code: ChainCosmosErrorCode.ErrTxTooLarge,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "key not found": {
    message: "The key has not been found",
    code: ChainCosmosErrorCode.ErrKeyNotFound,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid account password": {
    message: "invalid account password",
    code: ChainCosmosErrorCode.ErrWrongPassword,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "tx intended signer does not match the given signer": {
    message: "tx intended signer does not match the given signer",
    code: ChainCosmosErrorCode.ErrorInvalidSigner,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid gas adjustment": {
    message: "invalid gas adjustment",
    code: ChainCosmosErrorCode.ErrorInvalidGasAdjustment,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid height": {
    message: "The height provided in the transaction is not valid",
    code: ChainCosmosErrorCode.ErrInvalidHeight,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid version": {
    message: "The version provided in the transaction is not valid",
    code: ChainCosmosErrorCode.ErrInvalidVersion,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid chain-id": {
    message: "The chainId provided in the transaction is not valid",
    code: ChainCosmosErrorCode.ErrInvalidChainID,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid type": {
    message: "The type provided in the transaction is not valid",
    code: ChainCosmosErrorCode.ErrInvalidType,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "unknown extension options": {
    message: "The extension options provided in the transaction is unknown",
    code: ChainCosmosErrorCode.ErrUnknownExtensionOptions,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "incorrect account sequence": {
    message: "The sequence number provided in the transaction is incorrect",
    code: ChainCosmosErrorCode.ErrWrongSequence,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "failed packing protobuf message to Any": {
    message: "failed packing protobuf message to Any",
    code: ChainCosmosErrorCode.ErrPackAny,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "failed unpacking protobuf message from Any": {
    message: "failed unpacking protobuf message from Any",
    code: ChainCosmosErrorCode.ErrUnpackAny,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "internal logic error": {
    message: "Internal logic error",
    code: ChainCosmosErrorCode.ErrLogic,
    module: TransactionChainErrorModule.CosmosSdk
  },
  conflict: {
    message: "conflict",
    code: ChainCosmosErrorCode.ErrConflict,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "feature not supported": {
    message: "The feature is not supported",
    code: ChainCosmosErrorCode.ErrNotSupported,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "Internal IO error": {
    message: "Internal IO error",
    code: ChainCosmosErrorCode.ErrIO,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "error in app.toml": {
    message: "error in app.toml",
    code: ChainCosmosErrorCode.ErrAppConfig,
    module: TransactionChainErrorModule.CosmosSdk
  },
  "invalid gas limit": {
    message: "The gas limit provided in the transaction is not valid",
    code: ChainCosmosErrorCode.ErrInvalidGasLimit,
    module: TransactionChainErrorModule.CosmosSdk
  },
  // Auction Module Messages
  "invalid bid denom": {
    message: "The gas limit provided in the transaction is not valid",
    code: ChainAuctionErrorCodes.ErrBidInvalid,
    module: TransactionChainErrorModule.Auction
  },
  "invalid bid round": {
    message: "The gas limit provided in the transaction is not valid",
    code: ChainAuctionErrorCodes.ErrBidRound,
    module: TransactionChainErrorModule.Auction
  },
  // Insurance Module Messages
  "insurance fund already exists": {
    message: "The insurance fund already exists",
    code: ChainInsuranceErrorCodes.ErrInsuranceFundAlreadyExists,
    module: TransactionChainErrorModule.Insurance
  },
  "insurance fund not found": {
    message: "The insurance fund is not found",
    code: ChainInsuranceErrorCodes.ErrInsuranceFundNotFound,
    module: TransactionChainErrorModule.Insurance
  },
  "redemption already exists": {
    message: "The redemption already exists",
    code: ChainInsuranceErrorCodes.ErrRedemptionAlreadyExists,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid deposit amount": {
    message: "The deposit amount is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidDepositAmount,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid deposit denom": {
    message: "The deposit denom is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidDepositDenom,
    module: TransactionChainErrorModule.Insurance
  },
  "insurance payout exceeds deposits": {
    message: "The insurance fund payout exceeds the deposits",
    code: ChainInsuranceErrorCodes.ErrPayoutTooLarge,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid ticker": {
    message: "The ticker is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidTicker,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid quote denom": {
    message: "The quote denom is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidQuoteDenom,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid oracle": {
    message: "The oracle is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidOracle,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid expiration time": {
    message: "The expiration time is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidExpirationTime,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid marketID": {
    message: "The marketId is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidMarketID,
    module: TransactionChainErrorModule.Insurance
  },
  "invalid share denom": {
    message: "The share denom is not valid",
    code: ChainInsuranceErrorCodes.ErrInvalidShareDenom,
    module: TransactionChainErrorModule.Insurance
  },
  // Exchange Module Messages
  "failed to validate order": {
    message: "Your order failed to validate",
    code: ChainExchangeModuleErrorCode.ErrOrderInvalid,
    module: TransactionChainErrorModule.Exchange
  },
  "spot market not found": {
    message: "The spot market has not been found",
    code: ChainExchangeModuleErrorCode.ErrSpotMarketNotFound,
    module: TransactionChainErrorModule.Exchange
  },
  "spot market exists": {
    message: "The spot market already exists",
    code: ChainExchangeModuleErrorCode.ErrSpotMarketExists,
    module: TransactionChainErrorModule.Exchange
  },
  "struct field error": {
    message: "There is an issue with your order",
    code: ChainExchangeModuleErrorCode.ErrBadField,
    module: TransactionChainErrorModule.Exchange
  },
  "failed to validate market": {
    message: "The market failed to validate",
    code: ChainExchangeModuleErrorCode.ErrMarketInvalid,
    module: TransactionChainErrorModule.Exchange
  },
  "subaccount has insufficient deposits": {
    message: "Your trading account has insufficient funds",
    code: ChainExchangeModuleErrorCode.ErrInsufficientDeposit,
    module: TransactionChainErrorModule.Exchange
  },
  "unrecognized order type": {
    message: "The order type is not recognized",
    code: ChainExchangeModuleErrorCode.ErrUnrecognizedOrderType,
    module: TransactionChainErrorModule.Exchange
  },
  "position quantity insufficient for order": {
    message: "The position quantity is insufficient for the order",
    code: ChainExchangeModuleErrorCode.ErrInsufficientPositionQuantity,
    module: TransactionChainErrorModule.Exchange
  },
  "order hash is not valid": {
    message: "The order hash is not valid",
    code: ChainExchangeModuleErrorCode.ErrOrderHashInvalid,
    module: TransactionChainErrorModule.Exchange
  },
  "subaccount id is not valid": {
    message: "The subaccount id is not valid",
    code: ChainExchangeModuleErrorCode.ErrBadSubaccountID,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid base denom": {
    message: "",
    code: ChainExchangeModuleErrorCode.ErrInvalidBaseDenom,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid expiry": {
    message: "The expiry date is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidExpiry,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid price": {
    message: "The price is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidPrice,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid quantity": {
    message: "The quantity is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidQuantity,
    module: TransactionChainErrorModule.Exchange
  },
  "unsupported oracle type": {
    message: "The oracle type is not supported",
    code: ChainExchangeModuleErrorCode.ErrUnsupportedOracleType,
    module: TransactionChainErrorModule.Exchange
  },
  "order doesnt exist": {
    message: "The order does not exist",
    code: ChainExchangeModuleErrorCode.ErrOrderDoesntExist,
    module: TransactionChainErrorModule.Exchange
  },
  "spot limit orderbook fill invalid": {
    message: "",
    code: ChainExchangeModuleErrorCode.ErrOrderbookFillInvalid,
    module: TransactionChainErrorModule.Exchange
  },
  "perpetual market exists": {
    message: "The perpetual market already exists",
    code: ChainExchangeModuleErrorCode.ErrPerpetualMarketExists,
    module: TransactionChainErrorModule.Exchange
  },
  "expiry futures market exists": {
    message: "The expiry futures market market already exists",
    code: ChainExchangeModuleErrorCode.ErrExpiryFuturesMarketExists,
    module: TransactionChainErrorModule.Exchange
  },
  "expiry futures market expired": {
    message: "The expiry futures market has expired",
    code: ChainExchangeModuleErrorCode.ErrExpiryFuturesMarketExpired,
    module: TransactionChainErrorModule.Exchange
  },
  "no liquidity on the orderbook": {
    message: "There is not enough liquidity",
    code: ChainExchangeModuleErrorCode.ErrNoLiquidity,
    module: TransactionChainErrorModule.Exchange
  },
  "orderbook liquidity cannot satisfy current worst price": {
    message: "There is not enough liquidity",
    code: ChainExchangeModuleErrorCode.ErrSlippageExceedsWorstPrice,
    module: TransactionChainErrorModule.Exchange
  },
  "order has insufficient margin": {
    message: "The order has insufficient margin",
    code: ChainExchangeModuleErrorCode.ErrInsufficientOrderMargin,
    module: TransactionChainErrorModule.Exchange
  },
  "derivative market not found": {
    message: "The derivative market cannot be found",
    code: ChainExchangeModuleErrorCode.ErrDerivativeMarketNotFound,
    module: TransactionChainErrorModule.Exchange
  },
  "position not found": {
    message: "The position cannot be found",
    code: ChainExchangeModuleErrorCode.ErrPositionNotFound,
    module: TransactionChainErrorModule.Exchange
  },
  "position direction does not oppose the reduce-only order": {
    message: "Position direction does not oppose the reduce-only order",
    code: ChainExchangeModuleErrorCode.ErrInvalidReduceOnlyPositionDirection,
    module: TransactionChainErrorModule.Exchange
  },
  "price surpasses bankruptcy price": {
    message: "Your order price surpasses bankruptcy price",
    code: ChainExchangeModuleErrorCode.ErrPriceSurpassesBankruptcyPrice,
    module: TransactionChainErrorModule.Exchange
  },
  "position not liquidable": {
    message: "The position is not liquidable",
    code: ChainExchangeModuleErrorCode.ErrPositionNotLiquidable,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid trigger price": {
    message: "Your order trigger price is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidTriggerPrice,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid oracle type": {
    message: "The oracle type is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidOracleType,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid minimum price tick size": {
    message: "The minimum price tick size is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidPriceTickSize,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid minimum quantity tick size": {
    message: "The minimum quantity tick size is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidQuantityTickSize,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid minimum order margin": {
    message: "Your order's minimum margin is not valid ",
    code: ChainExchangeModuleErrorCode.ErrInvalidMargin,
    module: TransactionChainErrorModule.Exchange
  },
  "exceeds order side count": {
    message: "You cannot have more orders for this market for this direction",
    code: ChainExchangeModuleErrorCode.ErrExceedsOrderSideCount,
    module: TransactionChainErrorModule.Exchange
  },
  "subaccount cannot place a market order when a market order in the same market was already placed in same block": {
    message: "You cannot place another market order within this block",
    code: ChainExchangeModuleErrorCode.ErrMarketOrderAlreadyExists,
    module: TransactionChainErrorModule.Exchange
  },
  "cannot place a conditional market order when a conditional market order in same relative direction already exists": {
    message: "You cannot place another conditional market order",
    code: ChainExchangeModuleErrorCode.ErrConditionalMarketOrderAlreadyExists,
    module: TransactionChainErrorModule.Exchange
  },
  "an equivalent market launch proposal already exists.": {
    message: "There is an existing equivalent market launch proposal.",
    code: ChainExchangeModuleErrorCode.ErrMarketLaunchProposalAlreadyExists,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid market status": {
    message: "The market status is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidMarketStatus,
    module: TransactionChainErrorModule.Exchange
  },
  "base denom cannot be same with quote denom": {
    message: "The base denom and quote denom cannot be same",
    code: ChainExchangeModuleErrorCode.ErrSameDenoms,
    module: TransactionChainErrorModule.Exchange
  },
  "oracle base cannot be same with oracle quote": {
    message: "The oracle base and the oracle quote cannot be the same",
    code: ChainExchangeModuleErrorCode.ErrSameOracles,
    module: TransactionChainErrorModule.Exchange
  },
  "makerfeerate does not match takerfeeeate requirements": {
    message: "The MakerFeeRate does not match TakerFeeRate requirements",
    code: ChainExchangeModuleErrorCode.ErrFeeRatesRelation,
    module: TransactionChainErrorModule.Exchange
  },
  "maintenancemarginratio cannot be greater than initialmarginratio": {
    message: "The MaintenanceMarginRatio cannot be greater than InitialMarginRatio",
    code: ChainExchangeModuleErrorCode.ErrMarginsRelation,
    module: TransactionChainErrorModule.Exchange
  },
  "oraclescalefactor cannot be greater than maxoraclescalefactor": {
    message: "The OracleScaleFactor cannot be greater than MaxOracleScaleFactor",
    code: ChainExchangeModuleErrorCode.ErrExceedsMaxOracleScaleFactor,
    module: TransactionChainErrorModule.Exchange
  },
  "spot exchange is not enabled yet": {
    message: "Spot exchange is not enabled yet",
    code: ChainExchangeModuleErrorCode.ErrSpotExchangeNotEnabled,
    module: TransactionChainErrorModule.Exchange
  },
  "derivatives exchange is not enabled yet": {
    message: "Derivatives exchange is not enabled yet",
    code: ChainExchangeModuleErrorCode.ErrDerivativesExchangeNotEnabled,
    module: TransactionChainErrorModule.Exchange
  },
  "oracle price delta exceeds threshold": {
    message: "The oracle price delta exceeds threshold",
    code: ChainExchangeModuleErrorCode.ErrOraclePriceDeltaExceedsThreshold,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid hourly interest rate": {
    message: "The hourly interest rate is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidHourlyInterestRate,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid hourly funding rate cap": {
    message: "The hourly funding rate cap is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidHourlyFundingRateCap,
    module: TransactionChainErrorModule.Exchange
  },
  "only perpetual markets can update funding parameters": {
    message: "You can only update funding parameters on perpetual markets.",
    code: ChainExchangeModuleErrorCode.ErrInvalidMarketFundingParamUpdate,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid trading reward campaign": {
    message: "The trading reward campaign is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidTradingRewardCampaign,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid fee discount schedule": {
    message: "The fee discount schedule is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidFeeDiscountSchedule,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid liquidation order": {
    message: "The liquidation order is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidLiquidationOrder,
    module: TransactionChainErrorModule.Exchange
  },
  "unknown error happened for campaign distributions": {
    message: "Unknown error happened for campaign distributions",
    code: ChainExchangeModuleErrorCode.ErrTradingRewardCampaignDistributionError,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid trading reward points update": {
    message: "The updated trading reward points is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidTradingRewardsPendingPointsUpdate,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid batch msg update": {
    message: "The MsgBatchUpdate is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidBatchMsgUpdate,
    module: TransactionChainErrorModule.Exchange
  },
  "post-only order exceeds top of book price": {
    message: "The post-only order price exceeds top of the orderbook price",
    code: ChainExchangeModuleErrorCode.ErrExceedsTopOfBookPrice,
    module: TransactionChainErrorModule.Exchange
  },
  "order type not supported for given message": {
    message: "The order type is not supported for this message",
    code: ChainExchangeModuleErrorCode.ErrInvalidOrderTypeForMessage,
    module: TransactionChainErrorModule.Exchange
  },
  "sender must match dmm account": {
    message: "The sender must match the DMM address",
    code: ChainExchangeModuleErrorCode.ErrInvalidDMMSender,
    module: TransactionChainErrorModule.Exchange
  },
  "already opted out of rewards": {
    message: "The DMM address already opted out of rewards",
    code: ChainExchangeModuleErrorCode.ErrAlreadyOptedOutOfRewards,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid margin ratio": {
    message: "The margin ratio is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidMarginRatio,
    module: TransactionChainErrorModule.Exchange
  },
  "provided funds are below minimum": {
    message: "The provided funds are below minimum",
    code: ChainExchangeModuleErrorCode.ErrBelowMinimalContribution,
    module: TransactionChainErrorModule.Exchange
  },
  "position is below initial margin requirement": {
    message: "The position is below initial margin requirement",
    code: ChainExchangeModuleErrorCode.ErrLowPositionMargin,
    module: TransactionChainErrorModule.Exchange
  },
  "pool has non-positive total lp token supply": {
    message: "The pool has non-positive total LP token supply",
    code: ChainExchangeModuleErrorCode.ErrInvalidTotalSupply,
    module: TransactionChainErrorModule.Exchange
  },
  "passed lp token burn amount is greater than total lp token supply": {
    message: "The passed LP token burn amount is greater than total LP token supply",
    code: ChainExchangeModuleErrorCode.ErrInvalidLpTokenBurnAmount,
    module: TransactionChainErrorModule.Exchange
  },
  "unsupported action": {
    message: "This action is not supported",
    code: ChainExchangeModuleErrorCode.ErrUnsupportedAction,
    module: TransactionChainErrorModule.Exchange
  },
  "position quantity cannot be negative": {
    message: "The position quantity cannot be negative",
    code: ChainExchangeModuleErrorCode.ErrNegativePositionQuantity,
    module: TransactionChainErrorModule.Exchange
  },
  "binary options market exists": {
    message: "The BinaryOptions market already exists",
    code: ChainExchangeModuleErrorCode.ErrBinaryOptionsMarketExists,
    module: TransactionChainErrorModule.Exchange
  },
  "binary options market not found": {
    message: "The BinaryOptions market cannot be found",
    code: ChainExchangeModuleErrorCode.ErrBinaryOptionsMarketNotFound,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid settlement": {
    message: "The settlement price is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidSettlement,
    module: TransactionChainErrorModule.Exchange
  },
  "account doesnt exist": {
    message: "The trading account does not exist",
    code: ChainExchangeModuleErrorCode.ErrAccountDoesntExist,
    module: TransactionChainErrorModule.Exchange
  },
  "sender should be a market admin": {
    message: "The sender should be the admin of the market",
    code: ChainExchangeModuleErrorCode.ErrSenderIsNotAnAdmin,
    module: TransactionChainErrorModule.Exchange
  },
  "market is already scheduled to settle": {
    message: "The market is already scheduled to settle ",
    code: ChainExchangeModuleErrorCode.ErrMarketAlreadyScheduledToSettle,
    module: TransactionChainErrorModule.Exchange
  },
  "market not found": {
    message: "The market cannot be found",
    code: ChainExchangeModuleErrorCode.ErrGenericMarketNotFound,
    module: TransactionChainErrorModule.Exchange
  },
  "denom decimal cannot be below 1 or above max scale factor": {
    message: "The denom decimal cannot be below 1 or above max scale factor",
    code: ChainExchangeModuleErrorCode.ErrInvalidDenomDecimal,
    module: TransactionChainErrorModule.Exchange
  },
  "state is invalid": {
    message: "The state is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidState,
    module: TransactionChainErrorModule.Exchange
  },
  "transient orders up to cancellation not supported": {
    message: "The transient orders up to cancellation not supported",
    code: ChainExchangeModuleErrorCode.ErrTransientOrdersUpToCancelNotSupported,
    module: TransactionChainErrorModule.Exchange
  },
  "invalid trade": {
    message: "The trade is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidTrade,
    module: TransactionChainErrorModule.Exchange
  },
  "no margin locked in subaccount": {
    message: "There is no margin locked in the trading account",
    code: ChainExchangeModuleErrorCode.ErrNoMarginLocked,
    module: TransactionChainErrorModule.Exchange
  },
  "Invalid access level to perform action": {
    message: "There is no access to perform action",
    code: ChainExchangeModuleErrorCode.ErrInvalidAccessLevel,
    module: TransactionChainErrorModule.Exchange
  },
  "Invalid address": {
    message: "The address is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidAddress,
    module: TransactionChainErrorModule.Exchange
  },
  "Invalid argument": {
    message: "The argument is not valid",
    code: ChainExchangeModuleErrorCode.ErrInvalidArgument,
    module: TransactionChainErrorModule.Exchange
  },
  "empty validator address": {
    message: "empty validator address",
    code: ChainStakingErrorCodes.ErrEmptyValidatorAddr,
    module: TransactionChainErrorModule.Staking
  },
  "validator does not exist": {
    message: "validator does not exist",
    code: ChainStakingErrorCodes.ErrNoValidatorFound,
    module: TransactionChainErrorModule.Staking
  },
  "validator already exist for this operator address; must use new validator operator address": {
    message: "validator already exist for this operator address; must use new validator operator address",
    code: ChainStakingErrorCodes.ErrValidatorOwnerExists,
    module: TransactionChainErrorModule.Staking
  },
  "validator already exist for this pubkey; must use new validator pubkey": {
    message: "validator already exist for this pubkey; must use new validator pubkey",
    code: ChainStakingErrorCodes.ErrValidatorPubKeyExists,
    module: TransactionChainErrorModule.Staking
  },
  "validator pubkey type is not supported": {
    message: "validator pubkey type is not supported",
    code: ChainStakingErrorCodes.ErrValidatorPubKeyTypeNotSupported,
    module: TransactionChainErrorModule.Staking
  },
  "validator for this address is currently jailed": {
    message: "validator for this address is currently jailed",
    code: ChainStakingErrorCodes.ErrValidatorJailed,
    module: TransactionChainErrorModule.Staking
  },
  "failed to remove validator": {
    message: "failed to remove validator",
    code: ChainStakingErrorCodes.ErrBadRemoveValidator,
    module: TransactionChainErrorModule.Staking
  },
  "commission must be positive": {
    message: "commission must be positive",
    code: ChainStakingErrorCodes.ErrCommissionNegative,
    module: TransactionChainErrorModule.Staking
  },
  "commission cannot be more than 100%": {
    message: "commission cannot be more than 100%",
    code: ChainStakingErrorCodes.ErrCommissionHuge,
    module: TransactionChainErrorModule.Staking
  },
  "commission cannot be more than the max rate": {
    message: "commission cannot be more than the max rate",
    code: ChainStakingErrorCodes.ErrCommissionGTMaxRate,
    module: TransactionChainErrorModule.Staking
  },
  "commission cannot be changed more than once in 24h": {
    message: "commission cannot be changed more than once in 24h",
    code: ChainStakingErrorCodes.ErrCommissionUpdateTime,
    module: TransactionChainErrorModule.Staking
  },
  "commission change rate must be positive": {
    message: "commission change rate must be positive",
    code: ChainStakingErrorCodes.ErrCommissionChangeRateNegative,
    module: TransactionChainErrorModule.Staking
  },
  "commission change rate cannot be more than the max rate": {
    message: "commission change rate cannot be more than the max rate",
    code: ChainStakingErrorCodes.ErrCommissionChangeRateGTMaxRate,
    module: TransactionChainErrorModule.Staking
  },
  "commission cannot be changed more than max change rate": {
    message: "commission cannot be changed more than max change rate",
    code: ChainStakingErrorCodes.ErrCommissionGTMaxChangeRate,
    module: TransactionChainErrorModule.Staking
  },
  "validator's self delegation must be greater than their minimum self delegation": {
    message: "validator's self delegation must be greater than their minimum self delegation",
    code: ChainStakingErrorCodes.ErrSelfDelegationBelowMinimum,
    module: TransactionChainErrorModule.Staking
  },
  "minimum self delegation cannot be decrease": {
    message: "minimum self delegation cannot be decrease",
    code: ChainStakingErrorCodes.ErrMinSelfDelegationDecreased,
    module: TransactionChainErrorModule.Staking
  },
  "empty delegator address": {
    message: "empty delegator address",
    code: ChainStakingErrorCodes.ErrEmptyDelegatorAddr,
    module: TransactionChainErrorModule.Staking
  },
  "no delegation for (address, validator) tuple": {
    message: "no delegation for (address, validator) tuple",
    code: ChainStakingErrorCodes.ErrNoDelegation,
    module: TransactionChainErrorModule.Staking
  },
  "delegator does not exist with address": {
    message: "delegator does not exist with address",
    code: ChainStakingErrorCodes.ErrBadDelegatorAddr,
    module: TransactionChainErrorModule.Staking
  },
  "delegator does not contain delegation": {
    message: "delegator does not contain delegation",
    code: ChainStakingErrorCodes.ErrNoDelegatorForAddress,
    module: TransactionChainErrorModule.Staking
  },
  "insufficient delegation shares": {
    message: "insufficient delegation shares",
    code: ChainStakingErrorCodes.ErrInsufficientShares,
    module: TransactionChainErrorModule.Staking
  },
  "cannot delegate to an empty validator": {
    message: "cannot delegate to an empty validator",
    code: ChainStakingErrorCodes.ErrDelegationValidatorEmpty,
    module: TransactionChainErrorModule.Staking
  },
  "not enough delegation shares": {
    message: "not enough delegation shares",
    code: ChainStakingErrorCodes.ErrNotEnoughDelegationShares,
    module: TransactionChainErrorModule.Staking
  },
  "entry not mature": {
    message: "entry not mature",
    code: ChainStakingErrorCodes.ErrNotMature,
    module: TransactionChainErrorModule.Staking
  },
  "no unbonding delegation found": {
    message: "no unbonding delegation found",
    code: ChainStakingErrorCodes.ErrNoUnbondingDelegation,
    module: TransactionChainErrorModule.Staking
  },
  "too many unbonding delegation entries for (delegator, validator) tuple": {
    message: "too many unbonding delegation entries for (delegator, validator) tuple",
    code: ChainStakingErrorCodes.ErrMaxUnbondingDelegationEntries,
    module: TransactionChainErrorModule.Staking
  },
  "no redelegation found": {
    message: "no redelegation found",
    code: ChainStakingErrorCodes.ErrNoRedelegation,
    module: TransactionChainErrorModule.Staking
  },
  "cannot redelegate to the same validator": {
    message: "cannot redelegate to the same validator",
    code: ChainStakingErrorCodes.ErrSelfRedelegation,
    module: TransactionChainErrorModule.Staking
  },
  "too few tokens to redelegate (truncates to zero tokens)": {
    message: "too few tokens to redelegate (truncates to zero tokens)",
    code: ChainStakingErrorCodes.ErrTinyRedelegationAmount,
    module: TransactionChainErrorModule.Staking
  },
  "redelegation destination validator not found": {
    message: "redelegation destination validator not found",
    code: ChainStakingErrorCodes.ErrBadRedelegationDst,
    module: TransactionChainErrorModule.Staking
  },
  "redelegation to this validator already in progress; first redelegation to this validator must complete before next redelegation": {
    message: "redelegation to this validator already in progress; first redelegation to this validator must complete before next redelegation",
    code: ChainStakingErrorCodes.ErrTransitiveRedelegation,
    module: TransactionChainErrorModule.Staking
  },
  "too many redelegation entries for (delegator, src-validator, dst-validator) tuple": {
    message: "too many redelegation entries for (delegator, src-validator, dst-validator) tuple",
    code: ChainStakingErrorCodes.ErrMaxRedelegationEntries,
    module: TransactionChainErrorModule.Staking
  },
  "cannot delegate to validators with invalid (zero) ex-rate": {
    message: "cannot delegate to validators with invalid (zero) ex-rate",
    code: ChainStakingErrorCodes.ErrDelegatorShareExRateInvalid,
    module: TransactionChainErrorModule.Staking
  },
  "both shares amount and shares percent provided": {
    message: "both shares amount and shares percent provided",
    code: ChainStakingErrorCodes.ErrBothShareMsgsGiven,
    module: TransactionChainErrorModule.Staking
  },
  "neither shares amount nor shares percent provided": {
    message: "neither shares amount nor shares percent provided",
    code: ChainStakingErrorCodes.ErrNeitherShareMsgsGiven,
    module: TransactionChainErrorModule.Staking
  },
  "invalid historical info": {
    message: "invalid historical info",
    code: ChainStakingErrorCodes.ErrInvalidHistoricalInfo,
    module: TransactionChainErrorModule.Staking
  },
  "no historical info found": {
    message: "no historical info found",
    code: ChainStakingErrorCodes.ErrNoHistoricalInfo,
    module: TransactionChainErrorModule.Staking
  },
  "empty validator public key": {
    message: "empty validator public key",
    code: ChainStakingErrorCodes.ErrEmptyValidatorPubKey,
    module: TransactionChainErrorModule.Staking
  },
  "commission cannot be less than min rate": {
    message: "commission cannot be less than min rate",
    code: ChainStakingErrorCodes.ErrCommissionLTMinRate,
    module: TransactionChainErrorModule.Staking
  },
  "unbonding operation not found": {
    message: "unbonding operation not found",
    code: ChainStakingErrorCodes.ErrUnbondingNotFound,
    module: TransactionChainErrorModule.Staking
  },
  "cannot un-hold unbonding operation that is not on hold": {
    message: "cannot un-hold unbonding operation that is not on hold",
    code: ChainStakingErrorCodes.ErrUnbondingOnHoldRefCountNegative,
    module: TransactionChainErrorModule.Staking
  },
  "delegator address is empty": {
    message: "delegator address is empty",
    code: ChainDistributionErrorCodes.ErrEmptyDelegatorAddr,
    module: TransactionChainErrorModule.Distribution
  },
  "withdraw address is empty": {
    message: "withdraw address is empty",
    code: ChainDistributionErrorCodes.ErrEmptyWithdrawAddr,
    module: TransactionChainErrorModule.Distribution
  },
  "validator address is empty": {
    message: "validator address is empty",
    code: ChainDistributionErrorCodes.ErrEmptyValidatorAddr,
    module: TransactionChainErrorModule.Distribution
  },
  "no delegation distribution info": {
    message: "no delegation distribution info",
    code: ChainDistributionErrorCodes.ErrEmptyDelegationDistInfo,
    module: TransactionChainErrorModule.Distribution
  },
  "no validator distribution info": {
    message: "no validator distribution info",
    code: ChainDistributionErrorCodes.ErrNoValidatorDistInfo,
    module: TransactionChainErrorModule.Distribution
  },
  "no validator commission to withdraw": {
    message: "no validator commission to withdraw",
    code: ChainDistributionErrorCodes.ErrNoValidatorCommission,
    module: TransactionChainErrorModule.Distribution
  },
  "set withdraw address disabled": {
    message: "set withdraw address disabled",
    code: ChainDistributionErrorCodes.ErrSetWithdrawAddrDisabled,
    module: TransactionChainErrorModule.Distribution
  },
  "community pool does not have sufficient coins to distribute": {
    message: "community pool does not have sufficient coins distribute",
    code: ChainDistributionErrorCodes.ErrBadDistribution,
    module: TransactionChainErrorModule.Distribution
  },
  "invalid community pool spend proposal amount": {
    message: "invalid community pool spend proposal amount",
    code: ChainDistributionErrorCodes.ErrInvalidProposalAmount,
    module: TransactionChainErrorModule.Distribution
  },
  "invalid community pool spend proposal recipient": {
    message: "invalid community pool spend proposal recipient",
    code: ChainDistributionErrorCodes.ErrEmptyProposalRecipient,
    module: TransactionChainErrorModule.Distribution
  },
  "delegation does not exist": {
    message: "delegation does not exist",
    code: ChainDistributionErrorCodes.ErrNoDelegationExists,
    module: TransactionChainErrorModule.Distribution
  },
  "unknown proposal": {
    message: "unknown proposal",
    code: ChainGovErrorCodes.ErrUnknownProposal,
    module: TransactionChainErrorModule.Gov
  },
  "inactive proposal": {
    message: "inactive proposal",
    code: ChainGovErrorCodes.ErrInactiveProposal,
    module: TransactionChainErrorModule.Gov
  },
  "proposal already active": {
    message: "proposal already active",
    code: ChainGovErrorCodes.ErrAlreadyActiveProposal,
    module: TransactionChainErrorModule.Gov
  },
  "invalid proposal content": {
    message: "invalid proposal content",
    code: ChainGovErrorCodes.ErrInvalidProposalContent,
    module: TransactionChainErrorModule.Gov
  },
  "invalid proposal type": {
    message: "invalid proposal type",
    code: ChainGovErrorCodes.ErrInvalidProposalType,
    module: TransactionChainErrorModule.Gov
  },
  "invalid vote option": {
    message: "invalid vote option",
    code: ChainGovErrorCodes.ErrInvalidVote,
    module: TransactionChainErrorModule.Gov
  },
  "invalid genesis state": {
    message: "invalid genesis state",
    code: ChainGovErrorCodes.ErrInvalidGenesis,
    module: TransactionChainErrorModule.Gov
  },
  "no handler exists for proposal type": {
    message: "no handler exists for proposal type",
    code: ChainGovErrorCodes.ErrNoProposalHandlerExists,
    module: TransactionChainErrorModule.Gov
  },
  "proposal message not recogized by router": {
    message: "proposal message not recogized by router",
    code: ChainGovErrorCodes.ErrUnroutableProposalMsg,
    module: TransactionChainErrorModule.Gov
  },
  "no messages proposed": {
    message: "no messages proposed",
    code: ChainGovErrorCodes.ErrNoProposalMsgs,
    module: TransactionChainErrorModule.Gov
  },
  "invalid proposal message": {
    message: "invalid proposal message",
    code: ChainGovErrorCodes.ErrInvalidProposalMsg,
    module: TransactionChainErrorModule.Gov
  },
  "expected gov account as only signer for proposal message": {
    message: "expected gov account as only signer for proposal message",
    code: ChainGovErrorCodes.ErrInvalidSigner,
    module: TransactionChainErrorModule.Gov
  },
  "signal message is invalid": {
    message: "signal message is invalid",
    code: ChainGovErrorCodes.ErrInvalidSignalMsg,
    module: TransactionChainErrorModule.Gov
  },
  "metadata too long": {
    message: "metadata too long",
    code: ChainGovErrorCodes.ErrMetadataTooLong,
    module: TransactionChainErrorModule.Gov
  },
  "minimum deposit is too small": {
    message: "minimum deposit is too small",
    code: ChainGovErrorCodes.ErrMinDepositTooSmall,
    module: TransactionChainErrorModule.Gov
  },
  "proposal is not found": {
    message: "proposal is not found",
    code: ChainGovErrorCodes.ErrProposalNotFound,
    module: TransactionChainErrorModule.Gov
  },
  "invalid proposer": {
    message: "invalid proposer",
    code: ChainGovErrorCodes.ErrInvalidProposer,
    module: TransactionChainErrorModule.Gov
  },
  "no deposits found": {
    message: "no deposits found",
    code: ChainGovErrorCodes.ErrNoDeposits,
    module: TransactionChainErrorModule.Gov
  },
  "voting period already ended": {
    message: "voting period already ended",
    code: ChainGovErrorCodes.ErrVotingPeriodEnded,
    module: TransactionChainErrorModule.Gov
  },
  "invalid proposal": {
    message: "invalid proposal",
    code: ChainGovErrorCodes.ErrInvalidProposal,
    module: TransactionChainErrorModule.Gov
  },
  "no inputs to send transaction": {
    message: "no inputs to send transaction",
    code: ChainBankErrorCodes.ErrNoInputs,
    module: TransactionChainErrorModule.Bank
  },
  "no outputs to send transaction": {
    message: "no outputs to send transaction",
    code: ChainBankErrorCodes.ErrNoOutputs,
    module: TransactionChainErrorModule.Bank
  },
  "sum inputs != sum outputs": {
    message: "sum inputs != sum outputs",
    code: ChainBankErrorCodes.ErrInputOutputMismatch,
    module: TransactionChainErrorModule.Bank
  },
  "send transactions are disabled": {
    message: "send transactions are disabled",
    code: ChainBankErrorCodes.ErrSendDisabled,
    module: TransactionChainErrorModule.Bank
  },
  "client denom metadata not found": {
    message: "client denom metadata not found",
    code: ChainBankErrorCodes.ErrDenomMetadataNotFound,
    module: TransactionChainErrorModule.Bank
  },
  "invalid key": {
    message: "invalid key",
    code: ChainBankErrorCodes.ErrInvalidKey,
    module: TransactionChainErrorModule.Bank
  },
  "duplicate entry": {
    message: "duplicate entry",
    code: ChainBankErrorCodes.ErrDuplicateEntry,
    module: TransactionChainErrorModule.Bank
  },
  "multiple senders not allowed": {
    message: "multiple senders not allowed",
    code: ChainBankErrorCodes.ErrMultipleSenders,
    module: TransactionChainErrorModule.Bank
  },
  "create wasm contract failed": {
    code: ChainWasmErrorCodes.ErrCreateFailed,
    message: "create wasm contract failed",
    module: TransactionChainErrorModule.Wasm
  },
  "contract account already exists": {
    code: ChainWasmErrorCodes.ErrAccountExists,
    message: "contract account already exists",
    module: TransactionChainErrorModule.Wasm
  },
  "instantiate wasm contract failed": {
    code: ChainWasmErrorCodes.ErrInstantiateFailed,
    message: "instantiate wasm contract failed",
    module: TransactionChainErrorModule.Wasm
  },
  "execute wasm contract failed": {
    code: ChainWasmErrorCodes.ErrExecuteFailed,
    message: "execute wasm contract failed",
    module: TransactionChainErrorModule.Wasm
  },
  "insufficient gas": {
    code: ChainWasmErrorCodes.ErrGasLimit,
    message: "insufficient gas",
    module: TransactionChainErrorModule.Wasm
  },
  "invalid genesis": {
    code: ChainWasmErrorCodes.ErrInvalidGenesis,
    message: "invalid genesis",
    module: TransactionChainErrorModule.Wasm
  },
  "query wasm contract failed": {
    code: ChainWasmErrorCodes.ErrQueryFailed,
    message: "query wasm contract failed",
    module: TransactionChainErrorModule.Wasm
  },
  "invalid CosmosMsg from the contract": {
    code: ChainWasmErrorCodes.ErrInvalidMsg,
    message: "invalid CosmosMsg from the contract",
    module: TransactionChainErrorModule.Wasm
  },
  "migrate wasm contract failed": {
    code: ChainWasmErrorCodes.ErrMigrationFailed,
    message: "migrate wasm contract failed",
    module: TransactionChainErrorModule.Wasm
  },
  empty: {
    code: ChainWasmErrorCodes.ErrEmpty,
    message: "empty",
    module: TransactionChainErrorModule.Wasm
  },
  "exceeds limit": {
    code: ChainWasmErrorCodes.ErrLimit,
    message: "exceeds limit",
    module: TransactionChainErrorModule.Wasm
  },
  invalid: {
    code: ChainWasmErrorCodes.ErrInvalid,
    message: "invalid",
    module: TransactionChainErrorModule.Wasm
  },
  duplicate: {
    code: ChainWasmErrorCodes.ErrDuplicate,
    message: "duplicate",
    module: TransactionChainErrorModule.Wasm
  },
  "max transfer channels": {
    code: ChainWasmErrorCodes.ErrMaxIBCChannels,
    message: "max transfer channels",
    module: TransactionChainErrorModule.Wasm
  },
  "unsupported for this contract": {
    code: ChainWasmErrorCodes.ErrUnsupportedForContract,
    message: "unsupported for this contract",
    module: TransactionChainErrorModule.Wasm
  },
  "pinning contract failed": {
    code: ChainWasmErrorCodes.ErrPinContractFailed,
    message: "pinning contract failed",
    module: TransactionChainErrorModule.Wasm
  },
  "unpinning contract failed": {
    code: ChainWasmErrorCodes.ErrUnpinContractFailed,
    message: "unpinning contract failed",
    module: TransactionChainErrorModule.Wasm
  },
  "unknown message from the contract": {
    code: ChainWasmErrorCodes.ErrUnknownMsg,
    message: "unknown message from the contract",
    module: TransactionChainErrorModule.Wasm
  },
  "invalid event": {
    code: ChainWasmErrorCodes.ErrInvalidEvent,
    message: "invalid event",
    module: TransactionChainErrorModule.Wasm
  },
  "authorization not found": {
    code: ChainAuthZErrorCodes.ErrNoAuthorizationFound,
    message: "Authorization not found",
    module: TransactionChainErrorModule.Wasm
  },
  "expiration time of authorization": {
    code: ChainAuthZErrorCodes.ErrAuthorizationExpired,
    message: "Authorization expired",
    module: TransactionChainErrorModule.Wasm
  },
  "not found": {
    message: "not found",
    code: ChainCosmosErrorCode.ErrNotFound,
    module: TransactionChainErrorModule.CosmosSdk
  }
};

// ../../node_modules/@injectivelabs/utils/dist/esm/classes/Status.js
var StatusType;
(function(StatusType2) {
  StatusType2["Idle"] = "idle";
  StatusType2["Loading"] = "loading";
  StatusType2["Completed"] = "completed";
  StatusType2["Error"] = "error";
  StatusType2["Confirmed"] = "confirmed";
})(StatusType || (StatusType = {}));

// ../../node_modules/@injectivelabs/utils/dist/esm/constants.js
var INJ_DENOM = "inj";
var DEFAULT_GAS_LIMIT = 4e5;
var DEFAULT_GAS_PRICE = 5e8;
var DEFAULT_BLOCK_TIMEOUT_HEIGHT = 90;
var DEFAULT_BLOCK_TIME_IN_SECONDS = 2;
var DEFAULT_TX_BLOCK_INCLUSION_TIMEOUT_IN_MS = DEFAULT_BLOCK_TIMEOUT_HEIGHT * DEFAULT_BLOCK_TIME_IN_SECONDS * 1e3;
var DEFAULT_TIMESTAMP_TIMEOUT_MS = 60 * 1e3 * 3;
var DEFAULT_STD_FEE = {
  amount: [
    {
      amount: new BigNumber_default(DEFAULT_GAS_LIMIT).times(DEFAULT_GAS_PRICE).toString(),
      denom: "inj"
    }
  ],
  gas: DEFAULT_GAS_LIMIT.toString()
};

// ../../node_modules/@injectivelabs/utils/dist/esm/time.js
var SECONDS_IN_A_DAY = new BigNumber_default(60 * 60 * 24);

// ../../node_modules/@injectivelabs/utils/dist/esm/numbers.js
var $BigNumber = BigNumber_default.clone({ ROUNDING_MODE: BigNumber_default.ROUND_DOWN });

// ../../node_modules/@injectivelabs/networks/dist/esm/chainInfos.js
var mainnetChainInfo = {
  feeDenom: INJ_DENOM,
  chainId: ChainId.Mainnet,
  ethereumChainId: EthereumChainId.Mainnet,
  env: "mainnet"
};
var testnetChainInfo = {
  feeDenom: INJ_DENOM,
  chainId: ChainId.Testnet,
  ethereumChainId: EthereumChainId.Goerli,
  env: "testnet"
};
var devnetChainInfo = {
  feeDenom: INJ_DENOM,
  chainId: ChainId.Devnet,
  ethereumChainId: EthereumChainId.Goerli,
  env: "devnet"
};
var localChainInfo = {
  feeDenom: INJ_DENOM,
  chainId: ChainId.Devnet,
  ethereumChainId: EthereumChainId.Goerli,
  env: "local"
};

// ../../node_modules/@injectivelabs/networks/dist/esm/endpoints.js
var endpointsMainnetK8s = {
  indexer: "https://k8s.mainnet.exchange.grpc-web.injective.network",
  grpc: "https://k8s.mainnet.chain.grpc-web.injective.network",
  rpc: "https://k8s.mainnet.tm.injective.network",
  rest: "https://k8s.mainnet.lcd.injective.network",
  chronos: "https://k8s.mainnet.chronos.grpc-web.injective.network",
  explorer: "https://k8s.mainnet.explorer.grpc-web.injective.network",
  cache: "https://k8s.testnet.gateway.grpc-web.injective.network/"
};
var endpointsMainnetLB = {
  indexer: "https://k8s.global.mainnet.exchange.grpc-web.injective.network",
  grpc: "https://k8s.global.mainnet.chain.grpc-web.injective.network",
  rpc: "https://k8s.global.mainnet.tm.injective.network",
  rest: "https://k8s.global.mainnet.lcd.injective.network",
  chronos: "https://k8s.global.mainnet.chronos.grpc-web.injective.network",
  explorer: "https://k8s.global.mainnet.explorer.grpc-web.injective.network"
};
var endpointsMainnet = {
  indexer: "https://api.injective.network",
  grpc: "https://grpc.injective.network",
  rpc: "https://tm.injective.network",
  rest: "https://lcd.injective.network",
  chronos: "https://api.injective.network",
  explorer: "https://api.injective.network"
};
var endpointsStaging = {
  indexer: "https://staging.api.injective.network",
  grpc: "https://staging.grpc.injective.network",
  rpc: "https://staging.tm.injective.network",
  rest: "https://staging.lcd.injective.network",
  chronos: "https://staging.api.injective.network",
  explorer: "https://staging.api.injective.network"
};
var endpointsPublic = {
  ...endpointsStaging
};
var endpointsInternal = {
  indexer: "https://products.exchange.grpc-web.injective.network",
  grpc: "https://products.chain.grpc-web.injective.network",
  rpc: "https://products.tm.injective.network",
  rest: "https://products.lcd.injective.network",
  chronos: "https://products.exchange.grpc-web.injective.network",
  explorer: "https://products.exchange.grpc-web.injective.network"
};
var endpointsTestnetSentry = {
  indexer: "https://testnet.sentry.exchange.grpc-web.injective.network",
  grpc: "https://testnet.sentry.chain.grpc-web.injective.network",
  rpc: "https://testnet.sentry.tm.injective.network",
  rest: "https://testnet.sentry.lcd.injective.network",
  chronos: "https://testnet.sentry.exchange.grpc-web.injective.network",
  explorer: "https://testnet.sentry.exchange.grpc-web.injective.network"
};
var endpointsTestnetK8s = {
  indexer: "https://k8s.testnet.exchange.grpc-web.injective.network",
  grpc: "https://k8s.testnet.chain.grpc-web.injective.network",
  rpc: "https://k8s.testnet.tm.injective.network",
  rest: "https://k8s.testnet.lcd.injective.network",
  chronos: "https://k8s.testnet.exchange.grpc-web.injective.network",
  explorer: "https://k8s.testnet.explorer.grpc-web.injective.network",
  cache: "https://k8s.testnet.gateway.grpc-web.injective.network/"
};
var endpointsTestnet = {
  indexer: "https://testnet.exchange.grpc-web.injective.network",
  grpc: "https://testnet.chain.grpc-web.injective.network",
  rpc: "https://testnet.tm.injective.network",
  rest: "https://testnet.lcd.injective.network",
  chronos: "https://testnet.exchange.grpc-web.injective.network",
  explorer: "https://testnet.exchange.grpc-web.injective.network"
};
var endpointsTestnetOld = {
  indexer: "https://testnet.exchange.grpc-web.injective.dev",
  grpc: "https://testnet.chain.grpc-web.injective.dev",
  rpc: "https://testnet.tm.injective.dev",
  rest: "https://testnet.lcd.injective.dev",
  chronos: "https://testnet.exchange.grpc-web.injective.dev",
  explorer: "https://testnet.exchange.grpc-web.injective.dev"
};
var endpointsDevnet = {
  indexer: "https://devnet.api.injective.dev",
  grpc: "https://devnet.grpc.injective.dev",
  rpc: "https://devnet.tm.injective.dev",
  rest: "https://devnet.lcd.injective.dev",
  chronos: "https://devnet.api.injective.dev",
  explorer: "https://devnet.api.injective.dev"
};
var endpointsDevnet1 = {
  indexer: "https://devnet-1.api.injective.dev",
  grpc: "https://devnet-1.grpc.injective.dev",
  rpc: "https://devnet-1.tm.injective.dev",
  rest: "https://devnet-1.lcd.injective.dev",
  chronos: "https://devnet-1.api.injective.dev",
  explorer: "https://devnet-1.api.injective.dev"
};
var endpointsDevnet2 = {
  indexer: "https://devnet-2.api.injective.dev",
  grpc: "https://devnet-2.grpc.injective.dev",
  rpc: "https://devnet-2.tm.injective.dev",
  rest: "https://devnet-2.lcd.injective.dev",
  chronos: "https://devnet-2.api.injective.dev",
  explorer: "https://devnet-2.api.injective.dev"
};
var endpointsLocal = {
  indexer: "https://localhost:4444",
  grpc: "http://localhost:9091",
  rpc: "http://localhost:9091",
  rest: "http://localhost:9091",
  chronos: "https://localhost:4445",
  explorer: "https://localhost:4446"
};

// ../../node_modules/@injectivelabs/networks/dist/esm/types.js
var Network;
(function(Network2) {
  Network2["MainnetK8s"] = "mainnetK8s";
  Network2["MainnetLB"] = "mainnetLB";
  Network2["Mainnet"] = "mainnet";
  Network2["Staging"] = "staging";
  Network2["Public"] = "public";
  Network2["Internal"] = "internal";
  Network2["TestnetK8s"] = "testnetK8s";
  Network2["TestnetOld"] = "testnetOld";
  Network2["TestnetSentry"] = "testnetSentry";
  Network2["Testnet"] = "testnet";
  Network2["Devnet1"] = "devnet1";
  Network2["Devnet2"] = "devnet2";
  Network2["Devnet"] = "devnet";
  Network2["Local"] = "local";
})(Network || (Network = {}));

// ../../node_modules/@injectivelabs/networks/dist/esm/network.js
var networkEndpoints = {
  [Network.MainnetLB]: endpointsMainnetLB,
  [Network.MainnetK8s]: endpointsMainnetK8s,
  [Network.Staging]: endpointsStaging,
  [Network.Mainnet]: endpointsMainnet,
  [Network.Public]: endpointsPublic,
  [Network.Internal]: endpointsInternal,
  [Network.Devnet]: endpointsDevnet,
  [Network.Devnet1]: endpointsDevnet1,
  [Network.Devnet2]: endpointsDevnet2,
  [Network.Testnet]: endpointsTestnet,
  [Network.TestnetK8s]: endpointsTestnetK8s,
  [Network.TestnetOld]: endpointsTestnetOld,
  [Network.TestnetSentry]: endpointsTestnetSentry,
  [Network.Local]: endpointsLocal
};
var chainInfos = {
  [Network.MainnetLB]: mainnetChainInfo,
  [Network.MainnetK8s]: mainnetChainInfo,
  [Network.Staging]: mainnetChainInfo,
  [Network.Mainnet]: mainnetChainInfo,
  [Network.Public]: mainnetChainInfo,
  [Network.Internal]: mainnetChainInfo,
  [Network.Devnet]: devnetChainInfo,
  [Network.Devnet1]: devnetChainInfo,
  [Network.Devnet2]: devnetChainInfo,
  [Network.Testnet]: testnetChainInfo,
  [Network.TestnetOld]: testnetChainInfo,
  [Network.TestnetK8s]: testnetChainInfo,
  [Network.TestnetSentry]: testnetChainInfo,
  [Network.Local]: localChainInfo
};
var getNetworkEndpoints = (network) => networkEndpoints[network];

// ../../node_modules/@injectivelabs/ts-types/dist/esm/enums.js
var EthereumChainId2;
(function(EthereumChainId3) {
  EthereumChainId3[EthereumChainId3["Mainnet"] = 1] = "Mainnet";
  EthereumChainId3[EthereumChainId3["Ropsten"] = 3] = "Ropsten";
  EthereumChainId3[EthereumChainId3["Rinkeby"] = 4] = "Rinkeby";
  EthereumChainId3[EthereumChainId3["Goerli"] = 5] = "Goerli";
  EthereumChainId3[EthereumChainId3["Kovan"] = 42] = "Kovan";
  EthereumChainId3[EthereumChainId3["Injective"] = 888] = "Injective";
  EthereumChainId3[EthereumChainId3["Ganache"] = 1337] = "Ganache";
  EthereumChainId3[EthereumChainId3["HardHat"] = 31337] = "HardHat";
})(EthereumChainId2 || (EthereumChainId2 = {}));
var ChainId2;
(function(ChainId3) {
  ChainId3["Mainnet"] = "injective-1";
  ChainId3["Testnet"] = "injective-888";
  ChainId3["Devnet"] = "injective-777";
})(ChainId2 || (ChainId2 = {}));
var MsgType2;
(function(MsgType3) {
  MsgType3["MsgExec"] = "cosmos.authz.v1beta1.MsgExec";
  MsgType3["MsgGrant"] = "cosmos.authz.v1beta1.MsgGrant";
  MsgType3["MsgSend"] = "cosmos.bank.v1beta1.MsgSend";
  MsgType3["MsgWithdrawDelegatorReward"] = "cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward";
  MsgType3["MsgGrantAllowance"] = "cosmos.feegrant.v1beta1.MsgGrantAllowance";
  MsgType3["MsgDepositCosmos"] = "cosmos.gov.v1beta1.MsgDeposit";
  MsgType3["MsgSubmitProposal"] = "cosmos.gov.v1beta1.MsgSubmitProposal";
  MsgType3["MsgVote"] = "cosmos.gov.v1beta1.MsgVote";
  MsgType3["MsgUnjail"] = "cosmos.slashing.v1beta1.MsgUnjail";
  MsgType3["MsgBeginRedelegate"] = "cosmos.staking.v1beta1.MsgBeginRedelegate";
  MsgType3["MsgCreateValidator"] = "cosmos.staking.v1beta1.MsgCreateValidator";
  MsgType3["MsgDelegate"] = "cosmos.staking.v1beta1.MsgDelegate";
  MsgType3["MsgEditValidator"] = "cosmos.staking.v1beta1.MsgEditValidator";
  MsgType3["MsgUndelegate"] = "cosmos.staking.v1beta1.MsgUndelegate";
  MsgType3["MsgExecuteContract"] = "cosmwasm.wasm.v1.MsgExecuteContract";
  MsgType3["MsgInstantiateContract"] = "cosmwasm.wasm.v1.MsgInstantiateContract";
  MsgType3["MsgInstantiateContract2"] = "cosmwasm.wasm.v1.MsgInstantiateContract2";
  MsgType3["MsgMigrateContract"] = "cosmwasm.wasm.v1.MsgMigrateContract";
  MsgType3["MsgStoreCode"] = "cosmwasm.wasm.v1.MsgStoreCode";
  MsgType3["MsgUpdateAdmin"] = "cosmwasm.wasm.v1.MsgUpdateAdmin";
  MsgType3["MsgTransfer"] = "ibc.applications.transfer.v1.MsgTransfer";
  MsgType3["MsgAcknowledgement"] = "ibc.core.channel.v1.MsgAcknowledgement";
  MsgType3["MsgChannelOpenAck"] = "ibc.core.channel.v1.MsgChannelOpenAck";
  MsgType3["MsgChannelOpenConfirm"] = "ibc.core.channel.v1.MsgChannelOpenConfirm";
  MsgType3["MsgChannelOpenInit"] = "ibc.core.channel.v1.MsgChannelOpenInit";
  MsgType3["MsgChannelOpenTry"] = "ibc.core.channel.v1.MsgChannelOpenTry";
  MsgType3["MsgRecvPacket"] = "ibc.core.channel.v1.MsgRecvPacket";
  MsgType3["MsgTimeout"] = "ibc.core.channel.v1.MsgTimeout";
  MsgType3["MsgCreateClient"] = "ibc.core.client.v1.MsgCreateClient";
  MsgType3["MsgUpdateClient"] = "ibc.core.client.v1.MsgUpdateClient";
  MsgType3["MsgConnectionOpenAck"] = "ibc.core.connection.v1.MsgConnectionOpenAck";
  MsgType3["MsgConnectionOpenConfirm"] = "ibc.core.connection.v1.MsgConnectionOpenConfirm";
  MsgType3["MsgConnectionOpenInit"] = "ibc.core.connection.v1.MsgConnectionOpenInit";
  MsgType3["MsgConnectionOpenTry"] = "ibc.core.connection.v1.MsgConnectionOpenTry";
  MsgType3["MsgBid"] = "injective.auction.v1beta1.MsgBid";
  MsgType3["MsgAdminUpdateBinaryOptionsMarket"] = "injective.exchange.v1beta1.MsgAdminUpdateBinaryOptionsMarket";
  MsgType3["MsgBatchCancelDerivativeOrders"] = "injective.exchange.v1beta1.MsgBatchCancelDerivativeOrders";
  MsgType3["MsgBatchCancelSpotOrders"] = "injective.exchange.v1beta1.MsgBatchCancelSpotOrders";
  MsgType3["MsgBatchCreateDerivativeLimitOrders"] = "injective.exchange.v1beta1.MsgBatchCreateDerivativeLimitOrders";
  MsgType3["MsgBatchCreateSpotLimitOrders"] = "injective.exchange.v1beta1.MsgBatchCreateSpotLimitOrders";
  MsgType3["MsgBatchUpdateOrders"] = "injective.exchange.v1beta1.MsgBatchUpdateOrders";
  MsgType3["MsgCancelBinaryOptionsOrder"] = "injective.exchange.v1beta1.MsgCancelBinaryOptionsOrder";
  MsgType3["MsgCancelDerivativeOrder"] = "injective.exchange.v1beta1.MsgCancelDerivativeOrder";
  MsgType3["MsgCancelSpotOrder"] = "injective.exchange.v1beta1.MsgCancelSpotOrder";
  MsgType3["MsgCreateBinaryOptionsLimitOrder"] = "injective.exchange.v1beta1.MsgCreateBinaryOptionsLimitOrder";
  MsgType3["MsgCreateBinaryOptionsMarketOrder"] = "injective.exchange.v1beta1.MsgCreateBinaryOptionsMarketOrder";
  MsgType3["MsgCreateDerivativeLimitOrder"] = "injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder";
  MsgType3["MsgCreateDerivativeMarketOrder"] = "injective.exchange.v1beta1.MsgCreateDerivativeMarketOrder";
  MsgType3["MsgCreateSpotLimitOrder"] = "injective.exchange.v1beta1.MsgCreateSpotLimitOrder";
  MsgType3["MsgCreateSpotMarketOrder"] = "injective.exchange.v1beta1.MsgCreateSpotMarketOrder";
  MsgType3["MsgDeposit"] = "injective.exchange.v1beta1.MsgDeposit";
  MsgType3["MsgExternalTransfer"] = "injective.exchange.v1beta1.MsgExternalTransfer";
  MsgType3["MsgIncreasePositionMargin"] = "injective.exchange.v1beta1.MsgIncreasePositionMargin";
  MsgType3["MsgInstantBinaryOptionsMarketLaunch"] = "injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch";
  MsgType3["MsgInstantPerpetualMarketLaunch"] = "injective.exchange.v1beta1.MsgInstantPerpetualMarketLaunch";
  MsgType3["MsgInstantSpotMarketLaunch"] = "injective.exchange.v1beta1.MsgInstantSpotMarketLaunch";
  MsgType3["MsgReclaimLockedFunds"] = "injective.exchange.v1beta1.MsgReclaimLockedFunds";
  MsgType3["MsgRewardsOptOut"] = "injective.exchange.v1beta1.MsgRewardsOptOut";
  MsgType3["MsgSubaccountTransfer"] = "injective.exchange.v1beta1.MsgSubaccountTransfer";
  MsgType3["MsgWithdraw"] = "injective.exchange.v1beta1.MsgWithdraw";
  MsgType3["MsgCreateInsuranceFund"] = "injective.insurance.v1beta1.MsgCreateInsuranceFund";
  MsgType3["MsgRequestRedemption"] = "injective.insurance.v1beta1.MsgRequestRedemption";
  MsgType3["MsgUnderwrite"] = "injective.insurance.v1beta1.MsgUnderwrite";
  MsgType3["MsgConfirmBatch"] = "injective.peggy.v1.MsgConfirmBatch";
  MsgType3["MsgDepositClaim"] = "injective.peggy.v1.MsgDepositClaim";
  MsgType3["MsgERC20DeployedClaim"] = "injective.peggy.v1.MsgERC20DeployedClaim";
  MsgType3["MsgRequestBatch"] = "injective.peggy.v1.MsgRequestBatch";
  MsgType3["MsgSendToEth"] = "injective.peggy.v1.MsgSendToEth";
  MsgType3["MsgSetOrchestratorAddresses"] = "injective.peggy.v1.MsgSetOrchestratorAddresses";
  MsgType3["MsgValsetConfirm"] = "injective.peggy.v1.MsgValsetConfirm";
  MsgType3["MsgValsetUpdatedClaim"] = "injective.peggy.v1.MsgValsetUpdatedClaim";
  MsgType3["MsgWithdrawClaim"] = "injective.peggy.v1.MsgWithdrawClaim";
  MsgType3["MsgBurn"] = "injective.tokenfactory.v1beta1.MsgBurn";
  MsgType3["MsgMint"] = "injective.tokenfactory.v1beta1.MsgMint";
  MsgType3["MsgCreateDenom"] = "injective.tokenfactory.v1beta1.MsgCreateDenom";
  MsgType3["MsgExecuteContractCompat"] = "injective.wasmx.v1.MsgExecuteContractCompat";
})(MsgType2 || (MsgType2 = {}));
var MsgStatus2;
(function(MsgStatus3) {
  MsgStatus3["Success"] = "success";
  MsgStatus3["Fail"] = "fail";
})(MsgStatus2 || (MsgStatus2 = {}));

// ../../node_modules/@injectivelabs/ts-types/dist/esm/cosmos.js
var CosmosChainId2;
(function(CosmosChainId3) {
  CosmosChainId3["Injective"] = "injective-1";
  CosmosChainId3["Cosmoshub"] = "cosmoshub-4";
  CosmosChainId3["Juno"] = "juno-1";
  CosmosChainId3["Osmosis"] = "osmosis-1";
  CosmosChainId3["Terra"] = "columbus-5";
  CosmosChainId3["TerraUST"] = "columbus-5";
  CosmosChainId3["Chihuahua"] = "chihuahua-1";
  CosmosChainId3["Axelar"] = "axelar-dojo-1";
  CosmosChainId3["Evmos"] = "evmos_9001-2";
  CosmosChainId3["Persistence"] = "core-1";
  CosmosChainId3["Secret"] = "secret-4";
  CosmosChainId3["Stride"] = "stride-1";
  CosmosChainId3["Crescent"] = "crescent-1";
  CosmosChainId3["Sommelier"] = "sommelier-3";
  CosmosChainId3["Canto"] = "canto_7700-1";
  CosmosChainId3["Kava"] = "kava_2222-10";
  CosmosChainId3["Oraichain"] = "Oraichain";
})(CosmosChainId2 || (CosmosChainId2 = {}));
var TestnetCosmosChainId2;
(function(TestnetCosmosChainId3) {
  TestnetCosmosChainId3["Injective"] = "injective-888";
  TestnetCosmosChainId3["Cosmoshub"] = "cosmoshub-testnet";
})(TestnetCosmosChainId2 || (TestnetCosmosChainId2 = {}));
var DevnetCosmosChainId2;
(function(DevnetCosmosChainId3) {
  DevnetCosmosChainId3["Injective"] = "injective-777";
  DevnetCosmosChainId3["Injective1"] = "injective-777";
  DevnetCosmosChainId3["Injective2"] = "injective-777";
})(DevnetCosmosChainId2 || (DevnetCosmosChainId2 = {}));

// ../../node_modules/@injectivelabs/ts-types/dist/esm/trade.js
var TradeExecutionType2;
(function(TradeExecutionType3) {
  TradeExecutionType3["Market"] = "market";
  TradeExecutionType3["LimitFill"] = "limitFill";
  TradeExecutionType3["LimitMatchRestingOrder"] = "limitMatchRestingOrder";
  TradeExecutionType3["LimitMatchNewOrder"] = "limitMatchNewOrder";
})(TradeExecutionType2 || (TradeExecutionType2 = {}));
var TradeExecutionSide2;
(function(TradeExecutionSide3) {
  TradeExecutionSide3["Maker"] = "maker";
  TradeExecutionSide3["Taker"] = "taker";
})(TradeExecutionSide2 || (TradeExecutionSide2 = {}));
var TradeDirection2;
(function(TradeDirection3) {
  TradeDirection3["Buy"] = "buy";
  TradeDirection3["Sell"] = "sell";
  TradeDirection3["Long"] = "long";
  TradeDirection3["Short"] = "short";
})(TradeDirection2 || (TradeDirection2 = {}));
var OrderState2;
(function(OrderState3) {
  OrderState3["Unfilled"] = "unfilled";
  OrderState3["Booked"] = "booked";
  OrderState3["PartialFilled"] = "partial_filled";
  OrderState3["PartiallyFilled"] = "partially_filled";
  OrderState3["Filled"] = "filled";
  OrderState3["Canceled"] = "canceled";
  OrderState3["Triggered"] = "triggered";
})(OrderState2 || (OrderState2 = {}));
var OrderSide2;
(function(OrderSide3) {
  OrderSide3["Unspecified"] = "unspecified";
  OrderSide3["Buy"] = "buy";
  OrderSide3["Sell"] = "sell";
  OrderSide3["StopBuy"] = "stop_buy";
  OrderSide3["StopSell"] = "stop_sell";
  OrderSide3["TakeBuy"] = "take_buy";
  OrderSide3["TakeSell"] = "take_sell";
  OrderSide3["BuyPO"] = "buy_po";
  OrderSide3["SellPO"] = "sell_po";
  OrderSide3["BuyAtomic"] = "buy_atomic";
  OrderSide3["SellAtomic"] = "sell_atomic";
  OrderSide3["Unrecognized"] = "unrecognized";
})(OrderSide2 || (OrderSide2 = {}));

// ../../node_modules/@injectivelabs/ts-types/dist/esm/index.js
var StreamOperation2;
(function(StreamOperation3) {
  StreamOperation3["Insert"] = "insert";
  StreamOperation3["Delete"] = "delete";
  StreamOperation3["Replace"] = "replace";
  StreamOperation3["Update"] = "update";
  StreamOperation3["Invalidate"] = "invalidate";
})(StreamOperation2 || (StreamOperation2 = {}));

// src/tlds/inj/index.ts
var InjName = class {
  async getDomainName({ address }) {
    try {
      const endpoints = getNetworkEndpoints(Network.Mainnet);
      const injectiveId = new InjectiveID({
        grpc: endpoints.grpc,
        chainId: ChainId2.Mainnet,
        injectiveIdAddress: getInjectiveIDAddress(ChainId2.Mainnet)
      });
      const name = await injectiveId.getName(address);
      return name;
    } catch (error) {
      console.error("Error getting SEI domain name", error);
      return null;
    }
  }
  async getAddress({ name }) {
    try {
      const endpoints = getNetworkEndpoints(Network.Mainnet);
      const injectiveId = new InjectiveID({
        grpc: endpoints.grpc,
        chainId: ChainId2.Mainnet,
        injectiveIdAddress: getInjectiveIDAddress(ChainId2.Mainnet)
      });
      const address = await injectiveId.name(name).getAddress();
      return address;
    } catch (error) {
      console.error("Error getting SEI address", error);
      return null;
    }
  }
};

// src/injName.ts
function createInjName() {
  return new InjName();
}
export {
  createInjName
};
/*! Bundled license information:

store2/dist/store2.js:
  (*! store2 - v2.14.2 - 2022-07-18
  * Copyright (c) 2022 Nathan Bubna; Licensed (MIT OR GPL-3.0) *)
*/
