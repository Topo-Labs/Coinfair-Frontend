import { useRef, useState, useEffect } from 'react';

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var useResizeObserver = function useResizeObserver(option) {
  if (option === void 0) {
    option = 'contentRect';
  }

  var ref = useRef(null);

  var _useState = useState(),
      height = _useState[0],
      setHeight = _useState[1];

  var _useState2 = useState(),
      width = _useState2[0],
      setWidth = _useState2[1];

  useEffect(function () {
    if (ref.current) {
      var observer = new ResizeObserver(function (entries) {
        handleResize(entries);
      });
      observer.observe(ref.current);
      return function () {
        observer.disconnect();
      };
    }

    return undefined;
  });

  function handleResize(entries) {
    for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
      var entry = _step.value;

      if (option === 'borderBoxSize' && entry.borderBoxSize && entry.borderBoxSize.length > 0) {
        setHeight(entry.borderBoxSize[0].blockSize);
        setWidth(entry.borderBoxSize[0].inlineSize);
      } else if (option === 'contentBoxSize' && entry.contentBoxSize && entry.contentBoxSize.length > 0) {
        setHeight(entry.contentBoxSize[0].blockSize);
        setWidth(entry.contentBoxSize[0].inlineSize);
      } else {
        setHeight(entry.contentRect.height);
        setWidth(entry.contentRect.width);
      }
    }
  }

  return [ref, width, height];
};

export default useResizeObserver;
//# sourceMappingURL=index.modern.js.map
